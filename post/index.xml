<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Messmerr&#39;s Personal Blog</title>
        <link>https://messmerr.github.io/post/</link>
        <description>Recent content in Posts on Messmerr&#39;s Personal Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Messmerr</copyright>
        <lastBuildDate>Thu, 26 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://messmerr.github.io/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>OS-SWAP 实验报告</title>
        <link>https://messmerr.github.io/p/os-swap-%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</link>
        <pubDate>Thu, 26 Jun 2025 00:00:00 +0000</pubDate>
        
        <guid>https://messmerr.github.io/p/os-swap-%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</guid>
        <description>&lt;img src="https://messmerr.github.io/p/os-swap-%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/domenico-loia-hGV2TfOh0ns-unsplash.jpg" alt="Featured image of post OS-SWAP 实验报告" /&gt;&lt;hr&gt;
&lt;h1 id=&#34;os-swap-实验报告&#34;&gt;OS-SWAP 实验报告
&lt;/h1&gt;&lt;h2 id=&#34;前言&#34;&gt;前言
&lt;/h2&gt;&lt;p&gt;个人感觉SWAP相比Shell来说要不友好一些，因为很难有循序渐进的正反馈，做题的大部分时间都在对着各种报错痛苦地干瞪眼。本次任务我分了两段时间做，一次是考军理之前，花了两天整的时间企图给他速通掉，结果最后被一个顽固的bug击败，选择先复习。然后是24号考完马原之后又做了一天半，最后才完成。&lt;/p&gt;
&lt;p&gt;题目要求基于自己的lab6进行迭代，实现一套页面置换（SWAP）机制。该实现采用Linux风格的LRU（Least Recently Used）算法，通过维护active_list和inactive_list两个双向链表来管理物理页面的访问频率，并在物理内存不足时将页面换出到磁盘，在访问时自动换入。&lt;/p&gt;
&lt;h2 id=&#34;题目分解&#34;&gt;题目分解
&lt;/h2&gt;&lt;h3 id=&#34;工作内容&#34;&gt;工作内容
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;LRU算法实现&lt;/strong&gt;：正确维护active_list和inactive_list双向链表，跟踪页面访问模式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SWAP操作&lt;/strong&gt;：为内核创建访问磁盘的接口，实现swap_out和swap_in操作，管理磁盘存储&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;COW兼容性&lt;/strong&gt;：确保SWAP机制与Copy-On-Write机制正确协作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能优化&lt;/strong&gt;：避免频繁的TLB刷新，优化磁盘访问&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;一些注意事项&#34;&gt;一些注意事项
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;MIPS R4K没有硬件访问位，需要通过软件TLB重填模拟。记得考虑奇偶页的问题。&lt;/li&gt;
&lt;li&gt;页表项需要同时支持COW、SWAP等多种状态&lt;/li&gt;
&lt;li&gt;注意换出页面的状态保存和恢复&lt;/li&gt;
&lt;li&gt;确保系统稳定性，避免页表等关键页面被换出&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;具体实现&#34;&gt;具体实现
&lt;/h2&gt;&lt;h3 id=&#34;数据结构扩展&#34;&gt;数据结构扩展
&lt;/h3&gt;&lt;p&gt;为了支持功能，我对核心数据结构进行了扩展。&lt;/p&gt;
&lt;p&gt;首先，扩展了&lt;code&gt;Page&lt;/code&gt;结构体。这部分基本按照题目来就好，例如新增页面标志位（&lt;code&gt;pp_flags&lt;/code&gt;），其中我使用的有&lt;code&gt;PG_REFERENCED&lt;/code&gt;用于标记页面近期是否被访问，&lt;code&gt;PG_PINNED&lt;/code&gt;用于“钉住”关键页面防止被换出，以及后期做性能优化的时候我临时追加了&lt;code&gt;PG_ACTIVE&lt;/code&gt;和&lt;code&gt;PG_INACTIVE&lt;/code&gt;用于标识页面当前所在的LRU链表，避免每次都遍历。&lt;/p&gt;
&lt;p&gt;同时，为了在换出页面时能找到所有指向它的页表项（PTE），每个&lt;code&gt;Page&lt;/code&gt;结构体维护一个&lt;code&gt;Pte_list&lt;/code&gt;链表，链表中的每个节点&lt;code&gt;PteNode&lt;/code&gt;都包含一个指向PTE的指针、该PTE对应的虚拟地址以及地址空间ID（ASID）。这样，当一个物理页需要被换出时，可以遍历这个链表，修改所有相关的PTE。&lt;/p&gt;
&lt;p&gt;此外，当一个页面被换出到磁盘后，其在&lt;code&gt;Page&lt;/code&gt;结构体中保存的状态（如引用计数&lt;code&gt;pp_ref&lt;/code&gt;和页表项链表&lt;code&gt;pp_pte_list&lt;/code&gt;）需要被保留。为此，我也是用了题目推荐的状态管理结构&lt;code&gt;PageState&lt;/code&gt;，并创建了一个全局数组&lt;code&gt;page_state_set&lt;/code&gt;。该数组以磁盘块号为索引，用于存放换出页面的&lt;code&gt;PageState&lt;/code&gt;信息，确保页面换入时能够正确恢复状态。&lt;/p&gt;
&lt;h3 id=&#34;lru算法实现&#34;&gt;LRU算法实现
&lt;/h3&gt;&lt;p&gt;LRU算法的核心在于追踪页面访问模式和定期老化页面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;页面访问追踪&lt;/strong&gt;通过&lt;code&gt;page_touch&lt;/code&gt;函数实现。当一个页面被访问时，该函数会被调用。它首先检查页面是否被钉住，如果是则不参与LRU管理。否则，它会设置页面的&lt;code&gt;PG_REFERENCED&lt;/code&gt;标志位。如果页面原先在&lt;code&gt;inactive_list&lt;/code&gt;中，&lt;code&gt;page_touch&lt;/code&gt;会将其移动到&lt;code&gt;active_list&lt;/code&gt;的末尾，表示它最近被频繁使用。如果页面是新分配的，则会被加入&lt;code&gt;inactive_list&lt;/code&gt;的末尾。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;页面老化机制&lt;/strong&gt;由&lt;code&gt;shrink_active_list&lt;/code&gt;函数负责，该函数会定期执行（例如在调度器中）。它遍历&lt;code&gt;active_list&lt;/code&gt;中的所有页面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果页面的&lt;code&gt;PG_REFERENCED&lt;/code&gt;标志位被设置，说明它在上一轮老化周期中被访问过。此时，函数会清除该标志位，给予它“第二次机会”，让它留在&lt;code&gt;active_list&lt;/code&gt;中。&lt;/li&gt;
&lt;li&gt;如果标志位未被设置，则说明该页面近期“不活跃”，函数会将其从&lt;code&gt;active_list&lt;/code&gt;移动到&lt;code&gt;inactive_list&lt;/code&gt;的头部，使其成为优先被换出的候选者。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;swap磁盘管理&#34;&gt;SWAP磁盘管理
&lt;/h3&gt;&lt;p&gt;使用磁盘的次IDE控制器作为SWAP分区，以避免与主文件系统冲突。访存操作对着lab5里的内容模仿即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;磁盘空间分配&lt;/strong&gt;采用位图（bitmap）来管理。为了提高分配效率，我引入了一个&lt;code&gt;next_free_hint&lt;/code&gt;变量作为优化。分配函数&lt;code&gt;swap_block_alloc&lt;/code&gt;会从&lt;code&gt;next_free_hint&lt;/code&gt;指示的位置开始搜索空闲块，而不是每次都从头开始。找到空闲块后，更新&lt;code&gt;next_free_hint&lt;/code&gt;，这大大减少了平均搜索时间。&lt;/p&gt;
&lt;h3 id=&#34;页面换出实现&#34;&gt;页面换出实现
&lt;/h3&gt;&lt;p&gt;页面换出是内存紧张时的核心操作，由置换算法和具体的换出逻辑组成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;置换算法&lt;/strong&gt;（&lt;code&gt;algo_swap&lt;/code&gt;）负责挑选一个“受害者”页面。它的策略如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;优先在&lt;code&gt;inactive_list&lt;/code&gt;中寻找。&lt;/li&gt;
&lt;li&gt;遍历&lt;code&gt;inactive_list&lt;/code&gt;，如果一个页面未被钉住（这也算是重复检查了）且其&lt;code&gt;PG_REFERENCED&lt;/code&gt;标志位为0，则它就是理想的受害者，算法直接返回该页面。&lt;/li&gt;
&lt;li&gt;如果页面的&lt;code&gt;PG_REFERENCED&lt;/code&gt;标志位为1，则清除该标志位，给予其最后一次机会，然后继续查找下一个。&lt;/li&gt;
&lt;li&gt;如果遍历完&lt;code&gt;inactive_list&lt;/code&gt;仍未找到合适的页面（或列表为空），则调用&lt;code&gt;shrink_active_list&lt;/code&gt;将&lt;code&gt;active_list&lt;/code&gt;中的不活跃页面老化到&lt;code&gt;inactive_list&lt;/code&gt;中，然后重试查找。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;换出操作&lt;/strong&gt;（&lt;code&gt;swap_out&lt;/code&gt;）是具体的执行者：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用&lt;code&gt;algo_swap&lt;/code&gt;获取一个受害者页面。&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;swap_block_alloc&lt;/code&gt;在磁盘上申请一个空闲块。&lt;/li&gt;
&lt;li&gt;将受害者页面的状态（引用计数、PTE链表）保存到与磁盘块号对应的&lt;code&gt;page_state_set&lt;/code&gt;条目中。&lt;/li&gt;
&lt;li&gt;通过IDE接口，将受害者页面的物理内存内容写入到分配好的磁盘块中。&lt;/li&gt;
&lt;li&gt;遍历该页面的PTE链表，对每一个PTE进行修改：将其有效位（&lt;code&gt;PTE_V&lt;/code&gt;）清零，设置一个自定义的&lt;code&gt;PTE_SWAP&lt;/code&gt;标志位，并将物理地址部分替换为磁盘块号。同时，精确地使该PTE对应的TLB条目失效。&lt;/li&gt;
&lt;li&gt;最后，清空受害者&lt;code&gt;Page&lt;/code&gt;结构体的状态，使其成为一个干净的空闲页，可以被系统重新分配。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;页面换入实现&#34;&gt;页面换入实现
&lt;/h3&gt;&lt;p&gt;当程序访问一个已被换出的页面时，会触发缺页异常，最终调用&lt;code&gt;swap_in&lt;/code&gt;函数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;swap_in&lt;/code&gt;的逻辑与&lt;code&gt;swap_out&lt;/code&gt;相反：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从触发异常的PTE中，解析出&lt;code&gt;PTE_SWAP&lt;/code&gt;标志位和存储在地址部分的磁盘块号。&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;page_alloc&lt;/code&gt;分配一个新的物理页面。如果此时内存不足，&lt;code&gt;page_alloc&lt;/code&gt;内部可能会递归地触发一次&lt;code&gt;swap_out&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;通过IDE接口，从磁盘的指定块号中将页面内容读入新分配的物理页。&lt;/li&gt;
&lt;li&gt;从&lt;code&gt;page_state_set&lt;/code&gt;数组中取出该页面之前保存的状态，并恢复到新的&lt;code&gt;Page&lt;/code&gt;结构体中（包括引用计数和PTE链表）。&lt;/li&gt;
&lt;li&gt;遍历恢复的PTE链表，将每个PTE重新指向新的物理页地址，并设置&lt;code&gt;PTE_V&lt;/code&gt;、清除&lt;code&gt;PTE_SWAP&lt;/code&gt;标志。&lt;/li&gt;
&lt;li&gt;释放磁盘上的SWAP块，并清理&lt;code&gt;page_state_set&lt;/code&gt;中对应的条目。&lt;/li&gt;
&lt;li&gt;最后，调用&lt;code&gt;page_touch&lt;/code&gt;将这个新换入的页面加入LRU管理体系。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;tlb重填优化&#34;&gt;TLB重填优化
&lt;/h3&gt;&lt;p&gt;为了将SWAP机制集成，我修改了TLB重填处理函数&lt;code&gt;_do_tlb_refill&lt;/code&gt;。当发生TLB未命中时，内核会查找对应的PTE。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果PTE中设置了&lt;code&gt;PTE_SWAP&lt;/code&gt;标志，处理函数会立即调用&lt;code&gt;swap_in&lt;/code&gt;，将页面从磁盘换回内存，并自动处理PTE的更新。&lt;/li&gt;
&lt;li&gt;在页面被确认在内存中后（无论是原本就在还是刚刚换入），调用&lt;code&gt;page_touch&lt;/code&gt;来更新其在LRU链表中的位置。&lt;/li&gt;
&lt;li&gt;考虑MIPS处理器的奇偶页TLB项设计，确保成对的PTE被正确加载。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种设计实现了&lt;strong&gt;按需换入&lt;/strong&gt;，并且将LRU状态更新与页面访问紧密结合。&lt;/p&gt;
&lt;h3 id=&#34;cow机制兼容性&#34;&gt;COW机制兼容性
&lt;/h3&gt;&lt;p&gt;为了让SWAP与写时复制（COW）协同工作，我调整了&lt;code&gt;fork&lt;/code&gt;中的页面复制逻辑，并在SWAP相关代码考虑COW的存在。例如，fork操作在复制一个父进程的地址空间时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果一个页表项指向的页面是只读、COW页面，或者是&lt;strong&gt;已换出的页面&lt;/strong&gt;（即PTE带有&lt;code&gt;PTE_SWAP&lt;/code&gt;标志），那么子进程只复制这个页表项，而不分配新的物理页面。&lt;/li&gt;
&lt;li&gt;对于已换出的页面，父子进程将共享同一个指向磁盘块的PTE。当其中任何一个进程首次访问该页面时，才会触发&lt;code&gt;swap_in&lt;/code&gt;，并将页面加载到内存。此时，再结合COW逻辑，将其设置为只读。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;性能优化要点&#34;&gt;性能优化要点
&lt;/h2&gt;&lt;p&gt;我最后的修复是解决TLE。我在本地发现三个样例都过之后兴冲冲的去交，然后惨遭重拳，评测结果全空。&lt;/p&gt;
&lt;p&gt;经助教认证，这是典型的TLE症状。我去测了一下，我的项目此时跑完fork样例要花三分多，确实是太慢了。于是我开始做下面的优化。&lt;/p&gt;
&lt;h3 id=&#34;1-tlb刷新优化&#34;&gt;1. TLB刷新优化
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;移除schedule中的全局TLB刷新&lt;/li&gt;
&lt;li&gt;仅在页面状态变化时进行精确刷新&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-磁盘访问优化&#34;&gt;2. 磁盘访问优化
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用hint机制加速空闲块分配&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-内存管理优化&#34;&gt;3. 内存管理优化
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用页面标志位快速判断状态&lt;/li&gt;
&lt;li&gt;优化链表操作减少遍历开销&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;大模型使用&#34;&gt;大模型使用
&lt;/h2&gt;&lt;p&gt;不建议在搭建过程中依赖大模型。大模型是强大的工具，但是前提是自己得看过并能看懂他的代码，不然省下的精力会在debug阶段通通还回去。时刻保证自己对架构有掌控力是很重要的。&lt;/p&gt;
&lt;p&gt;但是gemini还是很适合提出建议和找bug的，除了直接扔文件以外，让他帮着用命令行体验也很不错，成功帮我这个从没用过gdb的人靠看栈找到了一个关键bug。&lt;/p&gt;
&lt;h2 id=&#34;感想&#34;&gt;感想
&lt;/h2&gt;&lt;p&gt;随着实验报告的完成，操作系统这门课程也正式告一段落。从lab0 extra的挫败到后面的习以为常，再到被SWAP折磨的这几个夜晚，这一切都要成为过往了。&lt;/p&gt;
&lt;p&gt;操作系统的任务全部完成之后，大二的学习内容就基本全部结束。马上就要成为一年前觉得遥不可及的大三老登了，时间过得真快。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>OS-lab0 实验报告</title>
        <link>https://messmerr.github.io/p/os-lab0-%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</link>
        <pubDate>Mon, 10 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://messmerr.github.io/p/os-lab0-%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</guid>
        <description>&lt;img src="https://messmerr.github.io/p/os-lab0-%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/the-creative-exchange-d2zvqp3fpro-unsplash.jpg" alt="Featured image of post OS-lab0 实验报告" /&gt;&lt;hr&gt;
&lt;h1 id=&#34;os-lab0-实验报告&#34;&gt;OS-lab0 实验报告
&lt;/h1&gt;&lt;h2 id=&#34;思考题&#34;&gt;思考题
&lt;/h2&gt;&lt;h4 id=&#34;thinking-01&#34;&gt;Thinking-0.1
&lt;/h4&gt;&lt;p&gt;Q：执行命令 cat Modified.txt，观察其结果和第一次执行 add 命令之前的 status 是 否一样，并思考原因。&lt;/p&gt;
&lt;p&gt;A：这两个 status 不一样，因为第一次 README.txt 是新文件，没有被暂存，因此显示&lt;code&gt;Untracked files&lt;/code&gt;，但当最后我们修改之前已经被提交的 README.txt，git 检测到的是修改了已有文件，故显示&lt;code&gt;Changes not staged for commit&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Untracked.txt：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;On branch main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;No commits yet
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Untracked files:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;use &lt;span class=&#34;s2&#34;&gt;&amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34;&lt;/span&gt; to include in what will be committed&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	README.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	Untracked.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nothing added to commit but untracked files present &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;use &lt;span class=&#34;s2&#34;&gt;&amp;#34;git add&amp;#34;&lt;/span&gt; to track&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Modified.txt：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;On branch main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Changes not staged &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; commit:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;use &lt;span class=&#34;s2&#34;&gt;&amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34;&lt;/span&gt; to update what will be committed&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;use &lt;span class=&#34;s2&#34;&gt;&amp;#34;git restore &amp;lt;file&amp;gt;...&amp;#34;&lt;/span&gt; to discard changes in working directory&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	modified:   README.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Untracked files:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;use &lt;span class=&#34;s2&#34;&gt;&amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34;&lt;/span&gt; to include in what will be committed&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	Modified.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	Stage.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	Untracked.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;thinking-02&#34;&gt;Thinking-0.2
&lt;/h4&gt;&lt;p&gt;Q： 仔细看看0.10，思考一下箭头中的 add the file 、stage the file 和 commit 分别对应的是 Git 里的哪些命令呢？&lt;/p&gt;
&lt;p&gt;A：分别是&lt;code&gt;git add&lt;/code&gt;，&lt;code&gt;git add&lt;/code&gt;和&lt;code&gt;git commit&lt;/code&gt;，前两个的区别在于添加的是未跟踪文件还是已修改文件。&lt;/p&gt;
&lt;h4 id=&#34;thinking-03&#34;&gt;Thinking-0.3
&lt;/h4&gt;&lt;p&gt;Q：思考下列问题： 1. 代码文件 print.c 被错误删除时，应当使用什么命令将其恢复？ 2. 代码文件 print.c 被错误删除后，执行了 git rm print.c 命令，此时应当 使用什么命令将其恢复？ 3. 无关文件 hello.txt 已经被添加到暂存区时，如何在不删除此文件的前提下 将其移出暂存区？&lt;/p&gt;
&lt;p&gt;A：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git restore print.c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git restore --staged print.c
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git restore print.c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git restore --staged hello.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;thinking-04&#34;&gt;Thinking-0.4
&lt;/h4&gt;&lt;p&gt;Q：按照指导书进行若干操作，通过多次&lt;code&gt;git log&lt;/code&gt;观察其变化。&lt;/p&gt;
&lt;p&gt;A：四次&lt;code&gt;git log&lt;/code&gt;输出分别如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Author: Xiao Yihan &amp;lt;23371301@buaa.edu.cn&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date:   Fri Mar &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 11:11:32 &lt;span class=&#34;m&#34;&gt;2025&lt;/span&gt; +0800
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;commit a41d443ed1c531f6a4ae09e37ab25a0b0c1ad229
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Author: Xiao Yihan &amp;lt;23371301@buaa.edu.cn&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date:   Fri Mar &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 11:11:17 &lt;span class=&#34;m&#34;&gt;2025&lt;/span&gt; +0800
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;commit 0dcbd1a4f693813cfb9212b974a6d161a2696de1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Author: Xiao Yihan &amp;lt;23371301@buaa.edu.cn&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date:   Fri Mar &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 11:10:45 &lt;span class=&#34;m&#34;&gt;2025&lt;/span&gt; +0800
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;commit 439b930fdd6bb1cebebe48bd91237c44cdfe4c15
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Author: Xiao Yihan &amp;lt;23371301@buaa.edu.cn&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date:   Fri Mar &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 10:46:12 &lt;span class=&#34;m&#34;&gt;2025&lt;/span&gt; +0800
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;m&#34;&gt;23371301&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Author: Xiao Yihan &amp;lt;23371301@buaa.edu.cn&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date:   Fri Mar &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 11:11:17 &lt;span class=&#34;m&#34;&gt;2025&lt;/span&gt; +0800
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;commit 0dcbd1a4f693813cfb9212b974a6d161a2696de1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Author: Xiao Yihan &amp;lt;23371301@buaa.edu.cn&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date:   Fri Mar &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 11:10:45 &lt;span class=&#34;m&#34;&gt;2025&lt;/span&gt; +0800
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;commit 439b930fdd6bb1cebebe48bd91237c44cdfe4c15
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Author: Xiao Yihan &amp;lt;23371301@buaa.edu.cn&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date:   Fri Mar &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 10:46:12 &lt;span class=&#34;m&#34;&gt;2025&lt;/span&gt; +0800
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;m&#34;&gt;23371301&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Author: Xiao Yihan &amp;lt;23371301@buaa.edu.cn&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date:   Fri Mar &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 11:10:45 &lt;span class=&#34;m&#34;&gt;2025&lt;/span&gt; +0800
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;commit 439b930fdd6bb1cebebe48bd91237c44cdfe4c15
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Author: Xiao Yihan &amp;lt;23371301@buaa.edu.cn&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date:   Fri Mar &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 10:46:12 &lt;span class=&#34;m&#34;&gt;2025&lt;/span&gt; +0800
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;m&#34;&gt;23371301&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;commit 3bf0d798caadb39ec68cb203c6a83865b21d19be &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;HEAD -&amp;gt; main&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Author: Xiao Yihan &amp;lt;23371301@buaa.edu.cn&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date:   Fri Mar &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 11:11:32 &lt;span class=&#34;m&#34;&gt;2025&lt;/span&gt; +0800
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;commit a41d443ed1c531f6a4ae09e37ab25a0b0c1ad229
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Author: Xiao Yihan &amp;lt;23371301@buaa.edu.cn&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date:   Fri Mar &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 11:11:17 &lt;span class=&#34;m&#34;&gt;2025&lt;/span&gt; +0800
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;commit 0dcbd1a4f693813cfb9212b974a6d161a2696de1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Author: Xiao Yihan &amp;lt;23371301@buaa.edu.cn&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date:   Fri Mar &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 11:10:45 &lt;span class=&#34;m&#34;&gt;2025&lt;/span&gt; +0800
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;commit 439b930fdd6bb1cebebe48bd91237c44cdfe4c15
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Author: Xiao Yihan &amp;lt;23371301@buaa.edu.cn&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date:   Fri Mar &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; 10:46:12 &lt;span class=&#34;m&#34;&gt;2025&lt;/span&gt; +0800
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;m&#34;&gt;23371301&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;以上结果展现了在&lt;code&gt;git&lt;/code&gt;中回退版本的各种操作。&lt;/p&gt;
&lt;h4 id=&#34;thinking-05&#34;&gt;Thinking-0.5
&lt;/h4&gt;&lt;p&gt;Q：执行如下命令, 并查看结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; first
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; second &amp;gt; output.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; third &amp;gt; output.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; forth &amp;gt;&amp;gt; output.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;A：结果如下（对于输出到文件的指令展示文件内容）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;first
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;second
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;third
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;third
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;forth
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这主要体现了重定向中覆盖和追加的不同效果。&lt;/p&gt;
&lt;h4 id=&#34;thinking-06&#34;&gt;Thinking-0.6
&lt;/h4&gt;&lt;p&gt;Q：使用你知道的方法（包括重定向）创建下图内容的文件（文件命名为 test）， 将创建该文件的命令序列保存在 command 文件中，并将 test 文件作为批处理文件运行，将 运行结果输出至 result 文件中。给出 command 文件和 result 文件的内容，并对最后的结 果进行解释说明（可以从 test 文件的内容入手）. 具体实现的过程中思考下列问题: echo echo Shell Start 与 echo &lt;code&gt;echo Shell Start&lt;/code&gt; 效果是否有区别; echo echo $c&amp;gt;file1 与 echo &lt;code&gt;echo $c&amp;gt;file1&lt;/code&gt; 效果是否有区别.&lt;/p&gt;
&lt;img src=&#34;image.png&#34; alt=&#34;image&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;A：
command 文件如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;echo Shell Start...&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;echo set a = 1&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;a=1&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;echo set b = 2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;b=2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;echo set c = a+b&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;c=$[$a+$b]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;echo c = $c&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;echo save c to ./file1&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;echo $c&amp;gt;file1&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;echo save b to ./file2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;echo $b&amp;gt;file2&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;echo save a to ./file3&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;echo $a&amp;gt;file3&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;echo save file1 file2 file3 to file4&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;cat file1&amp;gt;&amp;gt;file4&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;cat file2&amp;gt;&amp;gt;file4&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;cat file3&amp;gt;&amp;gt;file4&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;echo save file4 to ./result&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;cat file4&amp;gt;&amp;gt;result&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;result 文件如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Shell Start...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; a+b
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;save c to ./file1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;save b to ./file2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;save a to ./file3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;save file1 file2 file3 to file4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;save file4 to ./result
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat file1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat file2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cat file3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在实现中，echo echo Shell Start 与 echo &lt;code&gt;echo Shell Start&lt;/code&gt;没有区别，因为后面的内容会被视为普通字符串，无论加不加引号都不会触发解析。但是 echo echo $c&amp;gt;file1 与 echo &lt;code&gt;echo $c&amp;gt;file1&lt;/code&gt; 有区别，因为其中有 $ 的存在，如果不用&amp;rsquo;&amp;lsquo;包裹，就会对其做变量解析。&lt;/p&gt;
&lt;h2 id=&#34;难点分析&#34;&gt;难点分析
&lt;/h2&gt;&lt;p&gt;本次实验主要考察对实验环境、Linux 操作系统的了解、以及git 等重要工具的使用。我认为这次作业的主要难点有三个方面：git 的使用、Makefile 的设计以及 shell 脚本的撰写。&lt;/p&gt;
&lt;img src=&#34;框架图.png&#34; alt=&#34;框架图&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;h2 id=&#34;实验体会&#34;&gt;实验体会
&lt;/h2&gt;&lt;p&gt;在本次 lab0 实验中，我初步掌握了 Linux 的常用命令，深入接触了 Git、Makefile 和 Shell 脚本等开发工具。最初接触这些新工具时，我感到有些困惑和不适应，例如Makefile 的嵌套等，而攻克这些问题需要我再次查阅指导书或向互联网寻求帮助。&lt;/p&gt;
&lt;p&gt;Shell 脚本部分可能是我钻研最多的环节。文本处理命令如 sed、awk 初看起来很难，实际上也不简单。尤其是理解单双引号和$带来的行为差异和一些特殊参数的用法，这些细节在学习过程中很难吃透，却容易在上机时导致意想不到的问题。&lt;/p&gt;
&lt;p&gt;总的来说，这次实验让我认识到，掌握这些基础工具不仅能提高编程效率，更是培养系统思维和工程化思想的重要途径。虽然学习曲线有些陡峭，但这些技能的价值会在今后的项目开发中不断体现出来。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>北航CO_P7-MIPS微系统</title>
        <link>https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p7-mips%E5%BE%AE%E7%B3%BB%E7%BB%9F/</link>
        <pubDate>Thu, 28 Nov 2024 00:00:00 +0000</pubDate>
        
        <guid>https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p7-mips%E5%BE%AE%E7%B3%BB%E7%BB%9F/</guid>
        <description>&lt;img src="https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p7-mips%E5%BE%AE%E7%B3%BB%E7%BB%9F/20241128135158.png" alt="Featured image of post 北航CO_P7-MIPS微系统" /&gt;&lt;hr&gt;
&lt;h1 id=&#34;mips微系统设计方案&#34;&gt;MIPS微系统设计方案
&lt;/h1&gt;&lt;h2 id=&#34;概述&#34;&gt;概述
&lt;/h2&gt;&lt;p&gt;刚刚拿到实验教程的时候真的感到无从下手，不过在学长博客和gxpPPT的指引下还是解决了。这里贴出我用到的三个博客以示感谢。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://lazyfish-lc.github.io/2024/11/21/BUAA-CO-P7/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;北航CO 2024 P7课下部分个人理解分享 | Lazyfish &amp;amp; chilly_river&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://roife.github.io/posts/buaa-co-lab-p7/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;[BUAA-CO-Lab] P7 MIPS 微体系 | ROIFE BLOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://hyggge.github.io/2021/12/15/co/co-p7-mips-wei-xi-tong-yi-chang-zhong-duan/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;「BUAA-CO」P7_MIPS微系统（异常中断） | Hyggge&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;有一说一我觉得助教是刻意把教程弄成这样的。因为教程里都写了P7注重考验同学们的自主设计，并且在设计上给了同学们相当大的自由。不过我觉得还是改了为好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;搭建思路&#34;&gt;搭建思路
&lt;/h2&gt;&lt;p&gt;P7要做的事情有些琐碎，因此选择一个良好的操作顺序非常重要，以下是我的工作流程。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;搭建CP0，建议放M级。&lt;/li&gt;
&lt;li&gt;产生异常，设计出&lt;code&gt;ExcCode&lt;/code&gt;信号并随流水线传递到M级，注意课程组给出的条件，注意一条指令多个异常和多条指令同时异常的情况。&lt;/li&gt;
&lt;li&gt;根据CP0的需求爆改流水线，包括但不限于
&lt;ul&gt;
&lt;li&gt;将CP0需要的已知信号统统流水传递过来，原本没有的（如表示当前指令是否为延迟槽指令的&lt;code&gt;BDIn&lt;/code&gt;）就生成出来。&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;Controller&lt;/code&gt;模块中加入四条新指令即&lt;code&gt;mfc0&lt;/code&gt;,&lt;code&gt;mtc0&lt;/code&gt;,&lt;code&gt;eret&lt;/code&gt;,&lt;code&gt;syscall&lt;/code&gt;。选择合适的控制信号，个人建议syscall和eret单独拉出来。&lt;/li&gt;
&lt;li&gt;在CPU中以合适的方法建立四条新指令的数据通路。做这里的时候加吐我了，因为之前没有使用宏定义，导致很多之前不需要传递的信号都要传递。&lt;/li&gt;
&lt;li&gt;处理冒险，&lt;code&gt;mfc0&lt;/code&gt;转发直接用原有的数据通路。阻塞则只需要加一条eret相关阻塞，处理mtc0对EPC进行写入的问题，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通过修改流水级寄存器和NPC完成异常中断的跳转和返回过程。这里我们把CP0产生的异常中断信号&lt;code&gt;req&lt;/code&gt;传给这些模块，将流水级寄存器除了&lt;code&gt;PC&lt;/code&gt;以外的内容置0，&lt;code&gt;PC&lt;/code&gt;置为&lt;code&gt;32&#39;h4180&lt;/code&gt;，并让NPC跳转到&lt;code&gt;32&#39;h4180&lt;/code&gt;处，注意对实验教程中提到的对乘除模块的处理。返回则是当eret产生时，NPC跳回EPC同时清空延迟槽（操作想必大家都知道，注意阻塞的情况）。&lt;/li&gt;
&lt;li&gt;调整模块结构，规范化CPU的输入输出端口，并建立新的mips顶层模块，将CPU和课程组给的Timer放进去。&lt;/li&gt;
&lt;li&gt;设计Bridge模块，这个模块在P7的作用仅仅是判断当前读写的是哪个外设并处理对应的信号，实现相当简单。&lt;/li&gt;
&lt;li&gt;把线都连好，大功告成。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;功能模块设计&#34;&gt;功能模块设计
&lt;/h2&gt;&lt;p&gt;挑出比较重要的新增模块。&lt;/p&gt;
&lt;h3 id=&#34;cp0&#34;&gt;CP0
&lt;/h3&gt;&lt;p&gt;值得一提的是内部，许多学长是直接定义了&lt;code&gt;IM&lt;/code&gt;,&lt;code&gt;EXL&lt;/code&gt;,&lt;code&gt;IE&lt;/code&gt;等寄存器，在写入时则用拼接的方式这是合理的，因为&lt;code&gt;SR&lt;/code&gt;,&lt;code&gt;Cause&lt;/code&gt;中的绝大部分位数没有用。当然，还可以使用在模块内用宏定义，具体怎么实现看个人喜好。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;clk&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;时钟信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;reset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;复位信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;en&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;启用信号，控制CP0模块的操作&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;CP0Add&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;控制寄存器选择信号，指定访问的寄存器地址（5位）&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;CP0In&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;往CP0寄存器写入的数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;VPC&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;异常发生时的程序计数器值&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;BDIn&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;异常时的返回地址标志&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ExcCodeIn&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;异常代码&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;HWInt&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;硬件中断请求信号（6位）&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;6&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;EXLClr&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;清除异常级别标志（用于清除SR[1]）&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;EPCOut&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;异常程序计数器（EPC）输出&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;CP0Out&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;读取的CP0寄存器值，根据CP0Add选择&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Req&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;异常或中断请求信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;bridge&#34;&gt;Bridge
&lt;/h3&gt;&lt;p&gt;连个线，没啥可说的。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Addr&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;地址输入，决定访问的外设区域&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;byteen&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;字节使能信号，用于指示操作的字节&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;4&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;DM_RD&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;数据存储区读取数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;T0_RD&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;定时器0读取数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;T1_RD&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;定时器1读取数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;RD&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;输出数据，根据地址选择不同外设的读取数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;DM_WE&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;数据存储区写使能信号，根据地址选择是否写入数据存储区&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;4&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;T0_WE&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;定时器0写使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;T1_WE&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;定时器1写使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;int_WE&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;中断控制寄存器写使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;4&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;关于bug&#34;&gt;关于BUG
&lt;/h2&gt;&lt;p&gt;P7真的很容易写出各种各样的BUG，所以自行测试的时候就很考验数据点编写的能力（虽然我大部分都是找别人要的）。但如果要自己编写测试点，建议先把每种类型的异常全部构造出对应的点，先检验有没有漏判的问题。随后认真观察波形图，分析一下进入异常处理程序后各寄存器的情况，以及是怎么跳转回去的，跳转回去各寄存器的情况又如何。理解好异常中断的处理过程对于找bug好处很大。&lt;/p&gt;
&lt;p&gt;此外，评测机真的是好东西，cokiller帮我解决了大部分BUG，虽然最后还是漏了就是了。还有就是学长博客，以及多跟同学交流，很多BUG是共通的，例如空泡的问题。&lt;/p&gt;
&lt;h1 id=&#34;测试方案&#34;&gt;测试方案
&lt;/h1&gt;&lt;p&gt;之前P3的时候想着P4再搓评测机，到后面每天疲于奔命也没有自己搓了。
于是我就自己写了一点巨弱的测试点，然后又找大佬要了一堆强力测试点。&lt;/p&gt;
&lt;h1 id=&#34;思考题&#34;&gt;思考题
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;请查阅相关资料，说明鼠标和键盘的输入信号是如何被 CPU 知晓的？&lt;/strong&gt;
答：鼠标和键盘的输入信号通过硬件接口（如PS/2、USB或蓝牙）传输到计算机。当按下键盘的某个按键时，它会发送一个扫描码；鼠标则发送位置和点击信号。这些信号通过设备驱动程序转化为操作系统可以理解的格式，操作系统通过中断或轮询方式接收这些信号，并将其传递给相应的应用程序。最终，CPU根据这些输入信号作出响应，例如显示字符或移动鼠标指针。整个过程依赖硬件接口、驱动程序、操作系统和中断机制的协作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;请思考为什么我们的 CPU 处理中断异常必须是已经指定好的地址？如果你的 CPU 支持用户自定义入口地址，即处理中断异常的程序由用户提供，其还能提供我们所希望的功能吗？如果可以，请说明这样可能会出现什么问题？否则举例说明。（假设用户提供的中断处理程序合法）&lt;/strong&gt;
答：因为这样可以简化设计，增加系统的稳定性和可靠性。可以提供，但是可能会出现增加安全性问题，因为用户可能会选择不够安全的入口。此外，不同程序采用不同的入口可能导致冲突，出现故障时也不容易排查Bug.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;为何与外设通信需要 Bridge？&lt;/strong&gt;
答：因为在我们的设计中，CPU不需要知道外设的具体信息，只需要对程序指定的地址进行访问。这样符合高内聚低耦合的思想。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;请阅读官方提供的定时器源代码，阐述两种中断模式的异同，并分别针对每一种模式绘制状态移图。&lt;/strong&gt;
答：区别是enable是否是自动赋值。
&lt;img src=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p7-mips%E5%BE%AE%E7%B3%BB%E7%BB%9F/40d775c10a27c3170e8fe2f368afd6d.jpg&#34;
	width=&#34;1279&#34;
	height=&#34;1706&#34;
	srcset=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p7-mips%E5%BE%AE%E7%B3%BB%E7%BB%9F/40d775c10a27c3170e8fe2f368afd6d_hu18111232926173772819.jpg 480w, https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p7-mips%E5%BE%AE%E7%B3%BB%E7%BB%9F/40d775c10a27c3170e8fe2f368afd6d_hu5218508276199665538.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;74&#34;
		data-flex-basis=&#34;179px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;倘若中断信号流入的时候，在检测宏观 PC 的一级如果是一条空泡（你的 CPU 该级所有信息均为空）指令，此时会发生什么问题？在此例基础上请思考：在 P7 中，清空流水线产生的空泡指令应该保留原指令的哪些信息？&lt;/strong&gt;
答：那么EPC会变成0，这样跳回时会引发错误。所以应该保留PC信息和本条指令是否是延迟槽的信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;为什么 jalr 指令为什么不能写成 jalr $31, $31？&lt;/strong&gt;
答：因为我们处理延迟槽指令发生异常时EPC会指向跳转指令，因此从异常处理程序返回后跳转指令实际上总共被执行了两次，而&lt;code&gt;jalr&lt;/code&gt;具有累加效应，第二次执行的jalr和第一次是不一样的，所以会出错。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>北航CO_P6-verilog搭建三十条指令的五级流水线CPU</title>
        <link>https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p6-verilog%E6%90%AD%E5%BB%BA%E4%B8%89%E5%8D%81%E6%9D%A1%E6%8C%87%E4%BB%A4%E7%9A%84%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu/</link>
        <pubDate>Fri, 15 Nov 2024 00:00:00 +0000</pubDate>
        
        <guid>https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p6-verilog%E6%90%AD%E5%BB%BA%E4%B8%89%E5%8D%81%E6%9D%A1%E6%8C%87%E4%BB%A4%E7%9A%84%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu/</guid>
        <description>&lt;img src="https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p6-verilog%E6%90%AD%E5%BB%BA%E4%B8%89%E5%8D%81%E6%9D%A1%E6%8C%87%E4%BB%A4%E7%9A%84%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu/david-becker-F8c-KXMxnzk-unsplash.jpg" alt="Featured image of post 北航CO_P6-verilog搭建三十条指令的五级流水线CPU" /&gt;&lt;hr&gt;
&lt;h1 id=&#34;流水线cpu设计方案&#34;&gt;流水线CPU设计方案
&lt;/h1&gt;&lt;h2 id=&#34;概述&#34;&gt;概述
&lt;/h2&gt;&lt;p&gt;没想到P6意料之外的很轻松，只要加指令就行了，而这一届课程组给的指令巨好写，只有一个乘除模块需要花点时间。&lt;/p&gt;
&lt;h2 id=&#34;指令说明&#34;&gt;指令说明
&lt;/h2&gt;&lt;p&gt;本次在P5包含的指令基础上增加了十八条指令（这也太少了，感动）。&lt;/p&gt;
&lt;h3 id=&#34;r型计算型指令&#34;&gt;R型计算型指令
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;and&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;or&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sltu&lt;/code&gt;
改一改ALU和控制信号就解决了，巨方便。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;i型计算型指令&#34;&gt;I型计算型指令
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;andi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addi&lt;/code&gt;
同上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;b型指令&#34;&gt;B型指令
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bne&lt;/code&gt;
跳转可以出不知道多少复杂的题，课程组却选择了最简单的一个。只要加一个控制信号就行了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;访存指令&#34;&gt;访存指令
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sb&lt;/code&gt;
本来这个应该算是个需要思考的点的，结果课程组把IM，DM分出来之后只要确定字节使能信号和输入的数据就可以了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;乘除指令&#34;&gt;乘除指令
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mult&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multu&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;div&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;divu&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mfhi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mflo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mthi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mtlo&lt;/code&gt;
最需要动脑子的一集，不过看了教程也不难。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;功能模块设计&#34;&gt;功能模块设计
&lt;/h2&gt;&lt;p&gt;绝大部分地方跟P5一样，所以只选新增的展示。&lt;/p&gt;
&lt;h3 id=&#34;mdu乘除模块&#34;&gt;MDU（乘除模块）
&lt;/h3&gt;&lt;p&gt;这是一个时序逻辑模块，根据课程组要求，为了模拟乘除法执行时间长的现象，我们要在五（十）个周期后才能完成操作，不过要注意的是，因为E级流水线寄存器不会等着乘除模块（甚至阻塞时也不会，因为E级是清空），所以必须在指令刚到（即&lt;code&gt;start == 1&lt;/code&gt;时）的时候就把需要用到输入的运算全部做完。我的处理是在内部设置&lt;code&gt;HI_tmp&lt;/code&gt;和&lt;code&gt;LO_tmp&lt;/code&gt;两个寄存器，计算时直接把值存到这两个寄存器里，计数器数到0时再移到正式的&lt;code&gt;HI&lt;/code&gt;和&lt;code&gt;LO&lt;/code&gt;寄存器。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;clk&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;时钟信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;reset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;复位信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;start&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;开始信号，触发运算&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;MDUOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;乘除单元操作码&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;4&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;A&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;第一个操作数&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;B&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;第二个操作数&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;out&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;输出结果，根据操作码选择的寄存器值&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;busy&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;繁忙信号，指示MDU是否正在工作&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;dataext&#34;&gt;DataExt
&lt;/h3&gt;&lt;p&gt;为&lt;code&gt;lh&lt;/code&gt;和&lt;code&gt;lb&lt;/code&gt;量身定做的模块，&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;A&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;访存地址最后两位，用于选择字节或半字位置&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Din&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;输入数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Op&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;数据扩展操作码&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Dout&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;输出扩展后的数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;根据Op决定是哪个指令，再根据A决定读到的数据是什么。&lt;/p&gt;
&lt;h2 id=&#34;搭建转发数据通路&#34;&gt;搭建转发数据通路
&lt;/h2&gt;&lt;p&gt;为了方便，我直接在E级把乘除模块的输出和ALU的输出用选择器拼在了一起，所以二者完全共享相同的数据通路，不需要考虑任何转发的问题。&lt;/p&gt;
&lt;h2 id=&#34;阻塞信号的生成思路&#34;&gt;阻塞信号的生成思路
&lt;/h2&gt;&lt;p&gt;因为乘除法的执行必须通过&lt;code&gt;mfhi&lt;/code&gt;和&lt;code&gt;mflo&lt;/code&gt;才能影响其他指令，同时课程组保证乘除后一定会接这两个指令，所以我们可以简单粗暴的把乘除法相关的阻塞信号写成：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stall_md&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;busy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;D_MDUOp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;4&amp;#39;h0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// D_MDUOp为0表示其他指令，1-8分别对应八条乘除相关指令。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 只有当乘除法开始进行或正在进行且D级指令也是乘除相关时阻塞
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后再把这个信号和其他阻塞信号或起来就行了。&lt;/p&gt;
&lt;h1 id=&#34;测试方案&#34;&gt;测试方案
&lt;/h1&gt;&lt;p&gt;依然是手写了若干测试代码，把新增的指令都测到了，其中最上面那一块是我测出来的bug，mtlo错误地把输入口B而非A存入了&lt;code&gt;LO&lt;/code&gt;寄存器。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $21,$0,0xabcd
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mtlo $21
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nop
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nop
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mfhi $3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;andi $8,$19,0x2f4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mflo $1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lui $s0,0xf19a
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $s0,$s0,0x0233
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lui $s1,0x2da3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $s1,$s1,0x4d14
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mult $s0,$s1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mflo $s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mfhi $s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mthi $0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mfhi $s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;multu $s0,$s1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mflo $s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mfhi $s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mtlo $0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mflo $s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;div $s0,$s1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mflo $s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mfhi $s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mthi $0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mfhi $s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;divu $s0,$s1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mflo $s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mfhi $s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;label:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $t0,$0,1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;label2:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $t1,$0,2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;beq $t0,$t1,label2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bne $t0,$t0,label3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bne $t0,$t1,label
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nop
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;label3:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $s0,0x4215
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lui $s1,0x8000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $s1,0x9315
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $s2,$s1,$s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sub $s2,$s1,$s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;and $s2,$s1,$s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;or $s2,$s1,$s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;slt $s2,$s1,$s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sltu $s2,$s1,$s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lui $s0,0xabcd
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $s0,0xefff
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sb $s0,0($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sb $s0,5($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sb $s0,10($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sb $s0,15($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sh $s0,0($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sh $s0,2($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sw $s0,0($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lb $s1,0($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lb $s1,1($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lb $s1,2($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lb $s1,3($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lh $s1,0($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lh $s1,2($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lw $s1,0($0)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;思考题&#34;&gt;思考题
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;为什么需要有单独的乘除法部件而不是整合进 ALU？为何需要有独立的 HI、LO 寄存器？
答：乘除法的时间消耗远大于加减等运算，为了保证性能，我们选择将其独立出来，用多个时钟周期计算。独立的HI、LO寄存器作为乘除模块与其他部分的桥梁，符合高内聚低耦合的设计原理，如果不这样做，乘除模块的多执行周期很可能导致大量冒险的出现。&lt;/li&gt;
&lt;li&gt;真实的流水线 CPU 是如何使用实现乘除法的？请查阅相关资料进行简单说明。
答：将乘除法分成多个步骤，用多周期去实现，或者分散到流水线各级逐步实现。&lt;/li&gt;
&lt;li&gt;请结合自己的实现分析，你是如何处理 Busy 信号带来的周期阻塞的？
答：如果当前Start或Busy为1同时D级当前指令为乘除指令则阻塞。&lt;/li&gt;
&lt;li&gt;请问采用字节使能信号的方式处理写指令有什么好处？（提示：从清晰性、统一性等角度考虑）
答：直接用信号的形式展现出了当前操作作用的内存部分，一目了然。同时抽象出了不同访存指令的根本不同，形式统一。&lt;/li&gt;
&lt;li&gt;请思考，我们在按字节读和按字节写时，实际从 DM 获得的数据和向 DM 写入的数据是否是一字节？在什么情况下我们按字节读和按字节写的效率会高于按字读和按字写呢？
答：不是，事实上我们只是把一字节从读写的字中拆出来。当内存访问局部性差，数据小且存放位置离散时，字节读写效率可能更高。&lt;/li&gt;
&lt;li&gt;为了对抗复杂性你采取了哪些抽象和规范手段？这些手段在译码和处理数据冲突的时候有什么样的特点与帮助？
答：对于指令太多的问题，我使用了分类的方法，将功能和执行过程相近的指令放在一起，使得生成控制信号的时候一目了然。此外，我用多路选择器将不同的写入数据合在一起，共用转发数据通路，大幅减少了处理冒险时的复杂性。&lt;/li&gt;
&lt;li&gt;在本实验中你遇到了哪些不同指令类型组合产生的冲突？你又是如何解决的？相应的测试样例是什么样的？
答：&lt;code&gt;mfhi&lt;/code&gt;和&lt;code&gt;mflo&lt;/code&gt;与读取寄存器的指令产生的数据冒险，使用转发解决。还有乘除相关指令彼此之间的数据冒险，用阻塞解决。测试样例如下。
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $21,$0,0xabcd
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mtlo $21
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nop
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nop
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mfhi $3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;andi $8,$19,0x2f4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mflo $1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lui $s0,0xf19a
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $s0,$s0,0x0233
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lui $s1,0x2da3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $s1,$s1,0x4d14
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mult $s0,$s1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mflo $s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mfhi $s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mthi $0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mfhi $s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;multu $s0,$s1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mflo $s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mfhi $s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mtlo $0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mflo $s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;div $s0,$s1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mflo $s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mfhi $s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mthi $0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mfhi $s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;divu $s0,$s1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mflo $s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mfhi $s0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;如果你是手动构造的样例，请说明构造策略，说明你的测试程序如何保证覆盖了所有需要测试的情况；如果你是完全随机生成的测试样例，请思考完全随机的测试程序有何不足之处；如果你在生成测试样例时采用了特殊的策略，比如构造连续数据冒险序列，请你描述一下你使用的策略如何结合了随机性达到强测的效果。
答：首先保证所有指令都在测试范围中，随后要重点考虑边界条件和不同指令之间可能冲突的地方。例如对于乘除指令要测试multu和divu对于负数的运算，还有后面接mf指令的阻塞情况。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>北航CO_P5-verilog搭建五级流水线CPU</title>
        <link>https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p5-verilog%E6%90%AD%E5%BB%BA%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu/</link>
        <pubDate>Sun, 10 Nov 2024 00:00:00 +0000</pubDate>
        
        <guid>https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p5-verilog%E6%90%AD%E5%BB%BA%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu/</guid>
        <description>&lt;img src="https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p5-verilog%E6%90%AD%E5%BB%BA%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFcpu/domenico-loia-hGV2TfOh0ns-unsplash.jpg" alt="Featured image of post 北航CO_P5-verilog搭建五级流水线CPU" /&gt;&lt;hr&gt;
&lt;h1 id=&#34;流水线cpu设计方案&#34;&gt;流水线CPU设计方案
&lt;/h1&gt;&lt;h2 id=&#34;概述&#34;&gt;概述
&lt;/h2&gt;&lt;p&gt;本次课下我根据P4的代码进行了大规模重构，加入了五级流水线寄存器和转发的控制通路，最后针对转发和阻塞编写了冒险处理模块。&lt;/p&gt;
&lt;h2 id=&#34;指令说明&#34;&gt;指令说明
&lt;/h2&gt;&lt;p&gt;本文实现的CPU包含的指令与P4相同。&lt;/p&gt;
&lt;h3 id=&#34;r型指令&#34;&gt;R型指令
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sub&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;实际上实现的指令相当于&lt;code&gt;addu&lt;/code&gt;和&lt;code&gt;subu&lt;/code&gt;，因为题目明确指出不考虑溢出&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;i型指令&#34;&gt;I型指令
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ori&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lw&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sw&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lui&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;j型指令&#34;&gt;J型指令
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;jal&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;空指令&#34;&gt;空指令
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;功能模块设计含流水线寄存器&#34;&gt;功能模块设计（含流水线寄存器）
&lt;/h2&gt;&lt;p&gt;以下功能模块排列按照所在阶段从前往后排布。&lt;/p&gt;
&lt;h3 id=&#34;ifu&#34;&gt;IFU
&lt;/h3&gt;&lt;p&gt;相对P4，加入了使能信号和PC+8的值，分别是为了应对阻塞时冻结PC和跳转延迟槽的问题。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;clk&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;时钟信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;reset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;复位信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;en&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;next_pc&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;下一个指令地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;PC&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;当前指令地址寄存器&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;instr&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;当前指令&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;PC_8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;当前指令地址 + 8 的值&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;if_id&#34;&gt;IF_ID
&lt;/h3&gt;&lt;p&gt;第一个流水线寄存器。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;clk&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;时钟信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;reset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;复位信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;en&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;F_instr&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;取指阶段的当前指令&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;F_PC&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;取指阶段的当前指令地址寄存器&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;F_PC8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;取指阶段的当前指令地址 + 8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_instr&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段的当前指令&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_PC&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段的当前指令地址寄存器&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_PC8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段的当前指令地址 + 8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;controller&#34;&gt;Controller
&lt;/h2&gt;&lt;p&gt;加入了新信号Tuse和Tnew的产生逻辑，这两个信号将用于判断阻塞，后面将会详细分析。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;opcode&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;操作码，决定操作类型&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;6&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;funct&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;功能码，辅助操作码决定功能&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;6&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;NPCOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;下一个PC的操作码选择&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;RegWrite&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;寄存器写使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ALUOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ALU操作选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;MemWrite&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;内存写使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ExtOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;符号扩展操作选择&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;WAOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;写地址选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;WDOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;写数据选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;BOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;分支操作信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Tuse&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;使用时间信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Tnew&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;新数据时间信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;npc&#34;&gt;NPC
&lt;/h3&gt;&lt;p&gt;NPC是个特殊的模块，因为他不严格位于某个特定的阶段，他的输入既有F阶段的PC，也有D阶段的PC，所以编写具体逻辑的时候需要考虑，例如b和j型指令在跳转时要用到的是PC+8而非PC+4。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;F_PC&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;取指阶段的当前指令地址寄存器&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_PC&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段的当前指令地址寄存器&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;offset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;分支偏移量&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;16&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;instr_26&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;跳转指令的地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;26&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ra_data&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;返回地址寄存器数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;zero&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;零标志信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;NPCOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;下一个PC的操作码选择&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;next_pc&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;计算出的下一个指令地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;grf&#34;&gt;GRF
&lt;/h3&gt;&lt;p&gt;几乎不变的模块。注意这里如果把&lt;code&gt;always @(posedge)&lt;/code&gt;换成&lt;code&gt;always @(negedge)&lt;/code&gt;就等同于实现寄存器内部转发。不过这种操作显得有些邪道了（），而且寄存器内部转发也不麻烦，所以我没有采用。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;clk&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;时钟信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;reset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;复位信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;RegWrite&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;寄存器写使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;RA1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;读寄存器地址1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;RA2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;读寄存器地址2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;WA&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;写寄存器地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;WD&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;写入的数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;RD1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;读出的数据1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;RD2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;读出的数据2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;PC&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;当前指令地址，用于显示&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;cmp&#34;&gt;CMP
&lt;/h3&gt;&lt;p&gt;为了提高BEQ的运行效率特意准备的模块，小小的可爱捏。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;第一个比较数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;第二个比较数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;out&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;比较结果，1表示相等，0表示不相等&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;id_ex&#34;&gt;ID_EX
&lt;/h3&gt;&lt;p&gt;这真是一个大到可怕的模块（），因为前一个步骤产生的控制信号和运算信号太多了，当然也有我为了可扩展性而加入的一些无用信号有关。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;clk&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;时钟信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;reset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;复位信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;clr&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;清除信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_PC&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段的当前指令地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_PC8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段的当前指令地址 + 8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_RD1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段读出的数据1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_RD2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段读出的数据2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_extimm&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段扩展后的立即数&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_Funct&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段功能码&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;6&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_rs&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段的源寄存器地址1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_rt&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段的源寄存器地址2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_rd&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段的目的寄存器地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_offset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段的偏移量&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;16&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_PC&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的当前指令地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_PC8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的当前指令地址 + 8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_RD1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的读出数据1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_RD2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的读出数据2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_extimm&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段扩展后的立即数&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_Funct&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段功能码&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;6&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_rs&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的源寄存器地址1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_rt&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的源寄存器地址2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_rd&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的目的寄存器地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_offset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的偏移量&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;16&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_RegWrite&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段的寄存器写使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_ALUOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段的ALU操作选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_MemWrite&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段的内存写使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_WAOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段的写地址选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_WDOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段的写数据选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_BOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段的分支操作信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_RegWrite&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的寄存器写使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_ALUOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的ALU操作选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_MemWrite&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的内存写使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_WAOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的写地址选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_WDOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的写数据选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_BOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的分支操作信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Tnew&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;新数据时间信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_Tnew&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的新数据时间信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;alu&#34;&gt;ALU
&lt;/h3&gt;&lt;p&gt;和我P4设计文档对比可以看出判断是否相等的zero信号不在ALU里实现了，因为我单独定义了CMP模块。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ALUOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ALU操作选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;A&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;第一个操作数&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;B&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;第二个操作数&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ALU_res&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ALU运算结果&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;ex_mem&#34;&gt;EX_MEM
&lt;/h3&gt;&lt;p&gt;继续往前传。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;clk&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;时钟信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;reset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;复位信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_ALU_res&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的ALU运算结果&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_PC&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的当前指令地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_PC_8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的当前指令地址 + 8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_MemWD&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的内存写数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_WA&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的写地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_offset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的偏移量&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;16&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_ALU_res&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的ALU运算结果&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_PC&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的当前指令地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_PC_8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的当前指令地址 + 8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_MemWD&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的内存写数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_WA&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的写地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_offset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的偏移量&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;16&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_RegWrite&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的寄存器写使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_MemWrite&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的内存写使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_WAOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的写地址选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_WDOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的写数据选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_RegWrite&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的寄存器写使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_MemWrite&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的内存写使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_WAOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的写地址选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_WDOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的写数据选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_Tnew&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的新数据时间信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_Tnew&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的新数据时间信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;dm&#34;&gt;DM
&lt;/h3&gt;&lt;p&gt;不变。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;PC&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;当前指令地址，用于显示&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;clk&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;时钟信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;reset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;复位信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;MemWrite&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;内存写使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;WA&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;写地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;WD&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;写入的数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;RD&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;读出的数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;mem_wb&#34;&gt;MEM_WB
&lt;/h3&gt;&lt;p&gt;前进。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;clk&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;时钟信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;reset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;复位信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_ALU_res&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的ALU运算结果&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_PC&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的当前指令地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_PC_8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的当前指令地址 + 8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_MemRD&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的内存读取数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_WA&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的写地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_offset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的偏移量&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;16&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;W_ALU_res&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;回写阶段的ALU运算结果&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;W_PC&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;回写阶段的当前指令地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;W_PC_8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;回写阶段的当前指令地址 + 8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;W_MemRD&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;回写阶段的内存读取数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;W_WA&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;回写阶段的写地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;W_offset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;回写阶段的偏移量&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;16&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_RegWrite&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的寄存器写使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_WAOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的写地址选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_WDOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的写数据选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;W_RegWrite&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;回写阶段的寄存器写使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;W_WAOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;回写阶段的写地址选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;W_WDOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;回写阶段的写数据选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_Tnew&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的新数据时间信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;W_Tnew&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;回写阶段的新数据时间信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;mux&#34;&gt;MUX
&lt;/h3&gt;&lt;p&gt;这个模块包含了功能部件几乎所有的非跳转MUX。和各级流水线寄存器都有关。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;rt&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;源寄存器地址2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;rd&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;目的寄存器地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;WAOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;写地址选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;MemRD&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;内存读取数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;offset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;偏移量&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;16&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ALU_res&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ALU运算结果&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;PC_8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;当前指令地址 + 8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;WDOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;写数据选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;RD2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;读出的数据2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Ext_imm16&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;扩展后的16位立即数&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;BOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;分支操作信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;B&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;选择的操作数B&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;WD&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;写入的数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;A3&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;写入寄存器地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;搭建转发数据通路&#34;&gt;搭建转发数据通路
&lt;/h2&gt;&lt;p&gt;转发是P5最大的难关和主要任务。因为无脑阻塞可以速杀几乎所有的问题，但为了通过评测，必须使用转发来提高运行效率！&lt;/p&gt;
&lt;p&gt;我对每一个接收转发的位置都构建了对应的转发模块，这使得结构清晰。&lt;/p&gt;
&lt;h3 id=&#34;forwardrd1&#34;&gt;ForwardRD1
&lt;/h3&gt;&lt;p&gt;处理从E级、M级和W级到D_RD1的转发。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;W_WD&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;回写阶段的数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_ALU_res&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的ALU运算结果&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_PC_8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的当前指令地址 + 8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_offset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的偏移量&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;16&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_WDOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的写数据选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_PC_8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的当前指令地址 + 8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_offset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的偏移量&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;16&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_WDOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的写数据选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_RD1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段读出的数据1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Fwd_RD1Op&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;转发选择控制信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Fwd_RD1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;转发后的数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;forwardrd2&#34;&gt;ForwardRD2
&lt;/h3&gt;&lt;p&gt;处理从E级、M级和W级到D_RD2的转发。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;W_WD&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;回写阶段的数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_ALU_res&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的ALU运算结果&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_PC_8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的当前指令地址 + 8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_offset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的偏移量&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;16&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_WDOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的写数据选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_PC_8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的当前指令地址 + 8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_offset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的偏移量&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;16&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_WDOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的写数据选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_RD2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段读出的数据2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Fwd_RD2Op&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;转发选择控制信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Fwd_RD2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;转发后的数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;forwarda&#34;&gt;ForwardA
&lt;/h3&gt;&lt;p&gt;处理从M级和W级到E_A的转发。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;W_WD&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;回写阶段的数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_ALU_res&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的ALU运算结果&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_PC_8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的当前指令地址 + 8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_offset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的偏移量&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;16&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_WDOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的写数据选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;A&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;原始操作数A&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Fwd_AOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;转发选择控制信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Fwd_A&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;转发后的数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;forwardb&#34;&gt;ForwardB
&lt;/h3&gt;&lt;p&gt;处理从M级和W级到E_B的转发。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;W_WD&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;回写阶段的数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_ALU_res&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的ALU运算结果&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_PC_8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的当前指令地址 + 8&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_offset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的偏移量&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;16&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_WDOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的写数据选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;B&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;原始操作数B&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Fwd_BOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;转发选择控制信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Fwd_B&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;转发后的数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;转发阻塞信号的生成思路&#34;&gt;转发、阻塞信号的生成思路
&lt;/h2&gt;&lt;p&gt;我的转发和阻塞控制信号由同一个控制模块HazardUnit产生。通过输入所需要的信息，产生控制对应寄存器进行阻塞（即插入NOP指令）和控制转发模块选择正确转发数据的信号。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_RegWrite&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段的寄存器写使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_RegWrite&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的寄存器写使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_RegWrite&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的寄存器写使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;W_RegWrite&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;回写阶段的寄存器写使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_rs&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段的源寄存器地址1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;D_rt&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段的源寄存器地址2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_rs&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的源寄存器地址1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_rt&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的源寄存器地址2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_WDOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的写数据选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_WA&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的写地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_WA&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的写地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_WDOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的写数据选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;W_WA&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;回写阶段的写地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Fwd_RD1Op&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段读出数据1的转发控制信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Fwd_RD2Op&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;译码阶段读出数据2的转发控制信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Fwd_AOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段操作数A的转发控制信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Fwd_BOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段操作数B的转发控制信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Tuse&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;当前指令的使用时间&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;E_Tnew&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;执行阶段的新数据时间信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;M_Tnew&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储阶段的新数据时间信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;W_Tnew&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;回写阶段的新数据时间信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;IFU_en&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;指令获取单元的使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;IF_ID_en&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;IF/ID流水寄存器的使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ID_EX_clr&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ID/EX流水寄存器的清除信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;转发控制思路&#34;&gt;转发控制思路
&lt;/h3&gt;&lt;p&gt;由于我们前面已经把控制信号沿流水线不断传递，所以我们只需要比对对应阶段的控制信号就可以得知应该是否应该转发、应该转发哪里的值。例如我对于A转发信号的产生逻辑如下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Fwd_AOp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;E_rs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b011&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;M_RegWrite&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;E_rs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;M_WA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b010&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;W_RegWrite&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;E_rs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;W_WA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b001&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                  &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;需要注意的是，我这里的控制信号并没有完全决定转发情况，因为我还有一部分选择是在转发模块内完成的，不过这里就不展示了。&lt;/p&gt;
&lt;h3 id=&#34;阻塞控制思路&#34;&gt;阻塞控制思路
&lt;/h3&gt;&lt;p&gt;使用Tuse、Tnew大法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tuse表示数据到了 D 级之后还需要多少个周期要使用，每个指令的Tuse是固定不变的。
Tnew表示数据还有多长时间产生，会随着数据的流水动态的减少。具体实现方法是每次Tnew经过流水线寄存器传递的时候做判断，如果非0则减1。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;HazardUnit模块会对D级的Tuse信号（因为课程要求一律在D级阻塞）和每一级的Tnew信号。如果&lt;code&gt;Tuse &amp;lt; Tnew&lt;/code&gt;，那么说明当前需要的值还没有生成，必须阻塞流水线直到对应的值产生（即后续的Tnew通过递减与Tuse相等），反之，则说明可以通过转发解决，无需阻塞。&lt;/p&gt;
&lt;h1 id=&#34;测试方案&#34;&gt;测试方案
&lt;/h1&gt;&lt;p&gt;我在搭建和debug时手动编写了一系列测试样例，我把他合了起来。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $ra, $0, 0xffff
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jal label
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $s1, $ra, $0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;label:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lui $s0,1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $s0,$s0,$s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $s0,$s0,$s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $s0,$s0,$s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $s0,$0,1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jal bbb
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $s0,$s0,$s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $s1,$s0,$s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bbb:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $s1,$0,1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jr $ra
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $s2,$0,1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jal aaa
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $ra,$ra,$ra
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;aaa:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $ra,$ra,$ra
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $s0,$0,2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $s1,$0,1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sw $s0,0($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lw $s1,0($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $s1,$s1,$s1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $s1,$s1,$s1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $s1,$s1,$s1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $s1,$0,1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jal dest
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $s1,$s1,$s1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $s1,$s1,$s1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;dest:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $s1,$s1,$s1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jr $ra
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nop
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $s0,$0,1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $s1,$0,1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;beq $s1,$s0,dst
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $s1,$s1,$s1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $s1,$s1,$s1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $s1,$s1,$s1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;dst:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $s1,$s1,$s1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;思考题&#34;&gt;思考题
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;我们使用提前分支判断的方法尽早产生结果来减少因不确定而带来的开销，但实际上这种方法并非总能提高效率，请从流水线冒险的角度思考其原因并给出一个指令序列的例子。
答：以&lt;code&gt;beq&lt;/code&gt;为例，我们通过提前&lt;code&gt;beq&lt;/code&gt;的数据比较使其&lt;code&gt;Tuse&lt;/code&gt;减为0，虽然这在控制冒险角度减少了因为默认跳转不发生需要清除的指令，但也提高了阻塞率，例如在下面这一情况：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $s0,$s0,$s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;beq $s0,$s1,label
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为延迟槽的存在，对于 jal 等需要将指令地址写入寄存器的指令，要写回 PC + 8，请思考为什么这样设计？
答：因为在存在延迟槽的情况下，跳转发生的时候下一条指令即PC+4指向的指令已经进入了流水线，只有写入PC+8而非PC+4，才能防止跳回时这条指令被重复执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们要求大家所有转发数据都来源于流水寄存器而不能是功能部件（如 DM 、 ALU ），请思考为什么？
答：因为如果转发数据来源于功能部件，这会拉长流水线寄存器间功能部件得到稳定输出值的时间，这会增大流水线的最小周期，从而限制流水线频率，影响运行效率，违背了流水线设计的初衷。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们为什么要使用 GPR 内部转发？该如何实现？
答：因为当一个寄存器在流水线中同时被读写时会引发数据冒险，于是我们将即将写入寄存器的W_WD数据转发到读取寄存器的D_RD1、D_RD2，这样就实现了寄存器内部转发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们转发时数据的需求者和供给者可能来源于哪些位置？共有哪些转发数据通路？
答：在我的CPU中，需求者是D级的寄存器读取值和E级的ALU输入值，供给者可能来自于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;E级的16位立即数（&lt;code&gt;lui&lt;/code&gt;）和PC+8（&lt;code&gt;jal&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;M级的16位立即数（&lt;code&gt;lui&lt;/code&gt;）、PC+8（&lt;code&gt;jal&lt;/code&gt;）和ALU计算结果。&lt;/li&gt;
&lt;li&gt;W级的写入数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;转发数据通路包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;E到D&lt;/li&gt;
&lt;li&gt;M到D&lt;/li&gt;
&lt;li&gt;W到D&lt;/li&gt;
&lt;li&gt;M到E&lt;/li&gt;
&lt;li&gt;W到E&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在课上测试时，我们需要你现场实现新的指令，对于这些新的指令，你可能需要在原有的数据通路上做哪些扩展或修改？提示：你可以对指令进行分类，思考每一类指令可能修改或扩展哪些位置。
答：我会将指令分为计算型指令、跳转型指令、访存型指令。首先是改变数据通路，和单周期类似，尽可能用现成的数据通路进行扩建（这点和P4不同，因为新增数据通路会导致必须重写大批转发）。完成数据通路之后增加对应的Tuse，Tnew和对应的控制信号。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;确定你的译码方式，简要描述你的译码器架构，并思考该架构的优势以及不足。
答：我的译码方式是集中式译码。在D级生成所有的控制信号并逐级向后传递。
优势：编写简单，速度更快，关键路径更短。
不足：没有那么模块化。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>北航OOpre-课程总结</title>
        <link>https://messmerr.github.io/p/%E5%8C%97%E8%88%AAoopre-%E8%AF%BE%E7%A8%8B%E6%80%BB%E7%BB%93/</link>
        <pubDate>Fri, 01 Nov 2024 00:00:00 +0000</pubDate>
        
        <guid>https://messmerr.github.io/p/%E5%8C%97%E8%88%AAoopre-%E8%AF%BE%E7%A8%8B%E6%80%BB%E7%BB%93/</guid>
        <description>&lt;img src="https://messmerr.github.io/p/%E5%8C%97%E8%88%AAoopre-%E8%AF%BE%E7%A8%8B%E6%80%BB%E7%BB%93/the-creative-exchange-d2zvqp3fpro-unsplash.jpg" alt="Featured image of post 北航OOpre-课程总结" /&gt;&lt;hr&gt;
&lt;h1 id=&#34;架构设计及考虑&#34;&gt;架构设计及考虑
&lt;/h1&gt;&lt;h2 id=&#34;架构设计&#34;&gt;架构设计
&lt;/h2&gt;&lt;h3 id=&#34;类图&#34;&gt;类图
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAoopre-%E8%AF%BE%E7%A8%8B%E6%80%BB%E7%BB%93/image.png&#34;
	width=&#34;2257&#34;
	height=&#34;1428&#34;
	srcset=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAoopre-%E8%AF%BE%E7%A8%8B%E6%80%BB%E7%BB%93/image_hu7985024083629616615.png 480w, https://messmerr.github.io/p/%E5%8C%97%E8%88%AAoopre-%E8%AF%BE%E7%A8%8B%E6%80%BB%E7%BB%93/image_hu10467466136317895460.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;158&#34;
		data-flex-basis=&#34;379px&#34;
	
&gt;
最终程序共有22个类，其组织方式如下。&lt;/p&gt;
&lt;h3 id=&#34;mainclass&#34;&gt;MainClass
&lt;/h3&gt;&lt;p&gt;程序入口，调用&lt;code&gt;Print&lt;/code&gt;进行输入解析。&lt;/p&gt;
&lt;h3 id=&#34;print&#34;&gt;Print
&lt;/h3&gt;&lt;p&gt;解析输入，随后调用各个方法实现功能。&lt;/p&gt;
&lt;h3 id=&#34;adventure&#34;&gt;Adventure
&lt;/h3&gt;&lt;p&gt;冒险者类，因为几乎所有操作都以冒险者为主体，所以大多数功能需要这个类参与实现。&lt;/p&gt;
&lt;h3 id=&#34;fight&#34;&gt;Fight
&lt;/h3&gt;&lt;p&gt;专门控制战斗的类。&lt;/p&gt;
&lt;h3 id=&#34;employment&#34;&gt;Employment
&lt;/h3&gt;&lt;p&gt;专门控制雇佣关系的类。&lt;/p&gt;
&lt;h3 id=&#34;fragment&#34;&gt;Fragment
&lt;/h3&gt;&lt;p&gt;专门控制碎片的类。&lt;/p&gt;
&lt;h3 id=&#34;ce接口&#34;&gt;CE接口
&lt;/h3&gt;&lt;p&gt;连接冒险者游戏中的所有实体对象（均有CE）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Adventure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Bottle&lt;/code&gt;父类
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AtkBottle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DefBottle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HpBottle&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Equipment&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;guard接口&#34;&gt;Guard接口
&lt;/h3&gt;&lt;p&gt;连接所有工厂中的守卫：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Flm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stn&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Wnd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Frz&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;treasure接口&#34;&gt;Treasure接口
&lt;/h3&gt;&lt;p&gt;连接所有守卫对应的宝物：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ShdTreasure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FlmTreasure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StnTreasure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WndTreasure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FrzTreasure&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;架构考虑&#34;&gt;架构考虑
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在学习了&lt;strong&gt;继承和接口&lt;/strong&gt;之后，我重构了代码以增强类之间的逻辑关系，将各类药水瓶用父类形式实现，并使用&lt;strong&gt;接口&lt;/strong&gt;关联起了冒险者，武器和药水瓶。在此后的工厂中也使用了接口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对于复杂的功能，构造单独类来实现&lt;/strong&gt;，例如&lt;code&gt;Fight&lt;/code&gt;类，由于战斗过程复杂，单独提取出一个类，提高了代码的模块化程度。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MainClass&lt;/code&gt;类只用来进入程序，随后就进入&lt;code&gt;Print&lt;/code&gt;类负责解析输入输出。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;junit心得体会&#34;&gt;Junit心得体会
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Junit单元测试&lt;/strong&gt;是我们在OOpre课程中首次接触到的一种测试方法。他为我们提供了&lt;strong&gt;单独测试某个具体模块&lt;/strong&gt;的机会，当然这机会的出现&lt;strong&gt;也跟java自身面向对象的特点相适应&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在进行Junit单元测试时，我们应该进行&lt;strong&gt;自下而上&lt;/strong&gt;的设计，先分别测试底层的功能能否正常实现，然后在确信底层无BUG的情况下去构造测试去测试更高层的方法，这样有利于我们快速把握问题所在。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;覆盖率是判断Junit测试有效程度的重要指标&lt;/strong&gt;，也是OOpre课程的要求，我们今后在编写java程序时，就算没有强制要求，也应该养成保证Junit覆盖率的习惯。因为没有被测到的边边角角是最容易滋生BUG的。&lt;/p&gt;
&lt;h1 id=&#34;oopre心得体会&#34;&gt;OOpre心得体会
&lt;/h1&gt;&lt;p&gt;刚开始学习OOpre的时候真的感觉非常新奇。因为&lt;strong&gt;面向对象编程的体验和此前完全不同&lt;/strong&gt;。别的不说，创建一个新类后光靠代码补全就啪啪啪敲出一大堆内容的感觉真的很爽。&lt;/p&gt;
&lt;p&gt;不过到后期的迭代就老实了。此前我从来没有上过像OOpre这样的带有强测的课程。所以第一次需要修bug的时候真是死去活来，后面跟室友讨论才发现原来是重复携带上出了问题。不过最后一次倒是熟练了，找室友对拍了一下发现我的问题在于一次秘境探索比正常情况多闯了一关，找到对应的指令打个断点一看发现我居然携带了两个同id的药水瓶！具体问题出在哪就不说了，太丢脸。这个bug本该在第四次作业就暴露出来的。&lt;/p&gt;
&lt;h1 id=&#34;建议&#34;&gt;建议
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;弱测可以稍微强一点点（）&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>北航CO_P4-verilog搭建单周期CPU</title>
        <link>https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p4-verilog%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/</link>
        <pubDate>Thu, 31 Oct 2024 00:00:00 +0000</pubDate>
        
        <guid>https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p4-verilog%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/</guid>
        <description>&lt;img src="https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p4-verilog%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/growtika-P5mCQ4KACbM-unsplash.jpg" alt="Featured image of post 北航CO_P4-verilog搭建单周期CPU" /&gt;&lt;hr&gt;
&lt;h1 id=&#34;单周期cpu设计方案&#34;&gt;单周期CPU设计方案
&lt;/h1&gt;&lt;h2 id=&#34;概述&#34;&gt;概述
&lt;/h2&gt;&lt;p&gt;本次课下主要依靠P3的logisim进行翻译，不过我也对P3设计的一系列不合理之处进行了调整。我首先根据logisim电路图搭建各个模块，随后在mips.v文件中把各个模块合理地连接起来，最后添加controller模块产生控制信号。&lt;/p&gt;
&lt;h2 id=&#34;指令说明&#34;&gt;指令说明
&lt;/h2&gt;&lt;p&gt;本文实现的CPU在P3基础上添加了2条指令，即&lt;code&gt;jal&lt;/code&gt;和&lt;code&gt;jr&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;r型指令&#34;&gt;R型指令
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sub&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;实际上实现的指令相当于&lt;code&gt;addu&lt;/code&gt;和&lt;code&gt;subu&lt;/code&gt;，因为题目明确指出不考虑溢出&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;i型指令&#34;&gt;I型指令
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ori&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lw&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sw&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lui&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;j型指令&#34;&gt;J型指令
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;jal&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;空指令&#34;&gt;空指令
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;功能模块设计&#34;&gt;功能模块设计
&lt;/h2&gt;&lt;h3 id=&#34;ifu&#34;&gt;IFU
&lt;/h3&gt;&lt;p&gt;将PC和IM合二为一。IM使用&lt;code&gt;$readmehn&lt;/code&gt;语句读取&lt;code&gt;code.txt&lt;/code&gt;文件里的指令。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;clk&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;时钟信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;reset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;复位信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;next_pc&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;下一个指令地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;PC&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;当前指令地址寄存器&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;instr&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;当前指令&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;npc&#34;&gt;NPC
&lt;/h3&gt;&lt;p&gt;用组合逻辑计算出下一个指令的地址，通常是变为&lt;code&gt;PC+4&lt;/code&gt;。根据控制信号不同会执行&lt;code&gt;beq/jal/jr&lt;/code&gt;三种跳转。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;PC&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;当前指令地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;offset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;分支偏移量&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;16&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;instr_26&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;指令中26位目标地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;26&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ra_data&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;从GRF返回的地址数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;zero&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;分支条件标志&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;NPCOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;下一地址选择操作码&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;next_pc&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;计算后的下一指令地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;pc_add_4&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;当前地址加4的值&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;grf&#34;&gt;GRF
&lt;/h3&gt;&lt;p&gt;寄存器堆，同样是翻译即可。注意要&lt;code&gt;display&lt;/code&gt;否则无法评测。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;clk&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;时钟信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;reset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;复位信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;RegWrite&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;寄存器写入使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;RA1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;读寄存器1地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;RA2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;读寄存器2地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;WA&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;写寄存器地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;WD&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;写入数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;RD1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;读寄存器1数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;RD2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;读寄存器2数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;PC&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;当前程序计数器地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;dm&#34;&gt;DM
&lt;/h3&gt;&lt;p&gt;数据存储器，朴实无华的读写功能。同样需要&lt;code&gt;display&lt;/code&gt;。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;PC&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;当前程序计数器地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;clk&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;时钟信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;reset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;复位信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;MemWrite&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;内存写入使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;WA&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;写地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;WD&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;写入数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;RD&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;读取数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;alu&#34;&gt;ALU
&lt;/h3&gt;&lt;p&gt;本文需要的指令只需要四个运算：加、减、或。相等的判断用减法实现。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ALUOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ALU操作选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;A&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ALU第一个操作数&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;B&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ALU第二个操作数&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;zero&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;结果是否为零标志&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ALU_res&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ALU运算结果&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;mux&#34;&gt;MUX
&lt;/h3&gt;&lt;p&gt;这个模块的设计和每个人自身的电路设计高度相关，我认为先建立&lt;code&gt;mips.v&lt;/code&gt;顶层文件再构造更好。具体内容在下一部分讲解。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;rt&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;源寄存器1地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;rd&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;源寄存器2地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;WAOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;写地址选择操作码&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;MemRD&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;从内存读取的数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;offset&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;偏移量&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;16&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ALU_res&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ALU运算结果&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;pc_add_4&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;当前PC加4的值&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;WDOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;写数据选择操作码&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;RD2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;第二个读寄存器的数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Ext_imm16&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;扩展的16位立即数&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;BOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;B选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;B&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;选择的第二个操作数&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;WD&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;写入的数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;A3&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;写入的目标寄存器地址&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;组建数据通路&#34;&gt;组建数据通路
&lt;/h2&gt;&lt;p&gt;verilog组建数据通路的难度远大于logisim，因为不够直观，很容易漏接某些线。我认为比较不容易出错的设计方式如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将除MUX外的所有模块放入&lt;code&gt;mips.v&lt;/code&gt;文件中并接上所有的&lt;code&gt;I/O&lt;/code&gt;端口。为防出错，所有的接口都用同名&lt;code&gt;wire&lt;/code&gt;连接，可以先连好再定义这些&lt;code&gt;wire&lt;/code&gt;型变量。&lt;/li&gt;
&lt;li&gt;观察不同模块的接口，根据自己整理的表格/P3的电路图确定哪些端口之间是一对一连接的。使用assign语句把连接到对应端口的&lt;code&gt;wire&lt;/code&gt;变量链接在一起。&lt;/li&gt;
&lt;li&gt;对于需要用到多路选择器的端口，我们建立一个统一的&lt;code&gt;MUX&lt;/code&gt;模块，这个模块负责处理所有需要进行信号选择的端口。我们将所有可能的输入信号和一会用&lt;code&gt;Controller.v&lt;/code&gt;产生的选择信号全部作为&lt;code&gt;MUX&lt;/code&gt;的输入，所有输出信号作为输出，内部使用条件判断语句为各个输出信号赋上对应的值。随后将其添加到&lt;code&gt;mips.v&lt;/code&gt;中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;控制信号&#34;&gt;控制信号
&lt;/h2&gt;&lt;p&gt;建立一个新的&lt;code&gt;Controller.v&lt;/code&gt;模块，因为CPU操作只跟指令有关，所以输入只需要&lt;code&gt;opcode&lt;/code&gt;和&lt;code&gt;funct&lt;/code&gt;。对于其内部结构，我喜欢先为每一条指令单独定义一个&lt;code&gt;wire&lt;/code&gt;型变量，再以这些变量为条件去编写控制信号的生成逻辑。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;opcode&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;指令操作码&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;6&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;funct&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;功能码，用于区分操作类型&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;6&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;NPCOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;下一地址选择操作码&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;RegWrite&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;寄存器写使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ALUOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ALU操作码&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;MemWrite&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;内存写使能信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ExtOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;立即数扩展操作选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;WAOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;写地址选择操作码&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;WDOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;写数据选择操作码&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;BOp&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;第二操作数选择信号&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;思考题&#34;&gt;思考题
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;阅读下面给出的 DM 的输入示例中（示例 DM 容量为 4KB，即 32bit × 1024字），根据你的理解回答，这个 &lt;code&gt;addr&lt;/code&gt; 信号又是从哪里来的？地址信号 &lt;code&gt;addr&lt;/code&gt; 位数为什么是 [11:2] 而不是 [9:0] ？
&lt;img src=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p4-verilog%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image.png&#34;
	width=&#34;845&#34;
	height=&#34;269&#34;
	srcset=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p4-verilog%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image_hu15649591888432985222.png 480w, https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p4-verilog%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image_hu6653204169145448707.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;314&#34;
		data-flex-basis=&#34;753px&#34;
	
&gt;
答：&lt;code&gt;addr&lt;/code&gt;是ALU通过将寄存器值与偏移量&lt;code&gt;offset&lt;/code&gt;相加得到的地址信号，之所以取[11:2]是因为DM的存储是以32bit为单位，而地址信号是以8bit为单位，故略去后两位使地址信号与DM内的存储地址一致。&lt;/li&gt;
&lt;li&gt;思考上述两种控制器设计的译码方式，给出代码示例，并尝试对比各方式的优劣
答：指令对应的控制信号如何取值：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opcode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b000000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// R型指令，funct决定操作
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;         &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;funct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b100000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// add
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                 &lt;span class=&#34;n&#34;&gt;RegWrite&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;ALUOp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;WAOp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;NPCOp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;MemWrite&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;ExtOp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;WDOp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;BOp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b100010&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// sub
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                 &lt;span class=&#34;n&#34;&gt;RegWrite&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;ALUOp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b001&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;WAOp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;NPCOp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;MemWrite&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;ExtOp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;WDOp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;BOp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;c1&#34;&gt;//略
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;         &lt;span class=&#34;k&#34;&gt;endcase&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;c1&#34;&gt;//略
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;endcase&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;控制信号每种取值时对应的指令：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NPCOp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;beq&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b001&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;jal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b010&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;jr&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b011&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RegWrite&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ori&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lui&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ALUOp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;beq&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b001&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;ori&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b010&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b111&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MemWrite&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ExtOp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ori&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WAOp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;jr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b01&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;n&#34;&gt;jal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WDOp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b01&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;n&#34;&gt;lui&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;n&#34;&gt;jal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b11&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BOp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ori&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;在相应的部件中，复位信号的设计都是同步复位，这与 P3 中的设计要求不同。请对比同步复位与异步复位这两种方式的 &lt;code&gt;reset&lt;/code&gt; 信号与 &lt;code&gt;clk&lt;/code&gt; 信号优先级的关系。
答：同步复位中&lt;code&gt;clk&lt;/code&gt;信号优先级更高，只有&lt;code&gt;clk&lt;/code&gt;上升沿到来时&lt;code&gt;reset&lt;/code&gt;信号才有影响，而异步复位二者地位相当，二者都可以随时生效。&lt;/li&gt;
&lt;li&gt;C 语言是一种弱类型程序设计语言。C 语言中不对计算结果溢出进行处理，这意味着 C 语言要求程序员必须很清楚计算结果是否会导致溢出。因此，如果仅仅支持 C 语言，MIPS 指令的所有计算指令均可以忽略溢出。 请说明为什么在忽略溢出的前提下，&lt;code&gt;addi&lt;/code&gt; 与 &lt;code&gt;addiu&lt;/code&gt; 是等价的，&lt;code&gt;add&lt;/code&gt; 与 &lt;code&gt;addu&lt;/code&gt; 是等价的。
答：以&lt;code&gt;add&lt;/code&gt;与&lt;code&gt;addu&lt;/code&gt;为例，从RTL描述中可以看出，&lt;code&gt;addu&lt;/code&gt;就是在&lt;code&gt;add&lt;/code&gt;的基础上增加了如果运算结果最高位和次高位不相等就抛出报错，所以如果忽略这个溢出，二者就是等价的。&lt;code&gt;addi&lt;/code&gt;和&lt;code&gt;addiu&lt;/code&gt;同理。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>北航CO_P3-logisim搭建单周期CPU</title>
        <link>https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/</link>
        <pubDate>Wed, 23 Oct 2024 00:00:00 +0000</pubDate>
        
        <guid>https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/</guid>
        <description>&lt;img src="https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/pexels-jplenio-1105379.jpg" alt="Featured image of post 北航CO_P3-logisim搭建单周期CPU" /&gt;&lt;hr&gt;
&lt;h1 id=&#34;单周期cpu设计方案&#34;&gt;单周期CPU设计方案
&lt;/h1&gt;&lt;h2 id=&#34;概述&#34;&gt;概述
&lt;/h2&gt;&lt;p&gt;本文使用logisim搭建了一个支持八条指令的MIPS架构CPU。开发过程首先分析所需指令的RTL，抽象出所需要的功能。然后分别建模并实现恰当的功能部件。再根据不同指令之间的关系合理地组建出简洁的数据通路。最后通过构建真值表构造控制器。&lt;/p&gt;
&lt;h2 id=&#34;指令说明&#34;&gt;指令说明
&lt;/h2&gt;&lt;p&gt;本文实现的CPU只包含题目要求的8条指令，但笔者在使用时进行了一些操作以增强可扩展性，下文会在相应位置介绍。&lt;/p&gt;
&lt;h3 id=&#34;r型指令&#34;&gt;R型指令
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sub&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;实际上实现的指令相当于&lt;code&gt;addu&lt;/code&gt;和&lt;code&gt;subu&lt;/code&gt;，因为题目明确指出不考虑溢出&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;i型指令&#34;&gt;I型指令
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ori&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lw&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sw&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lui&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;空指令&#34;&gt;空指令
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;模块设计&#34;&gt;模块设计
&lt;/h2&gt;&lt;h3 id=&#34;pc&#34;&gt;PC
&lt;/h3&gt;&lt;p&gt;就是一个32位寄存器，没什么特别设计的。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Clk&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;reset&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;DI&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;DO&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;npc&#34;&gt;NPC
&lt;/h3&gt;&lt;p&gt;用组合逻辑计算出下一个指令的地址，通常是变为&lt;code&gt;PC+4&lt;/code&gt;。对于跳转指令，本文只包含一个beq，但笔者为jal和jr留出了对应的接口。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;PC&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;imm16&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;16&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;imm26&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;26&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;A32&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;NPCOp&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Zero&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;NPC&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;grf&#34;&gt;GRF
&lt;/h3&gt;&lt;p&gt;寄存器堆，之前在P0已经设计过了。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Clk&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;WE&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;reset&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;WD&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;A1&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;A2&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;A3&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;RD1&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;RD2&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;im&#34;&gt;IM
&lt;/h3&gt;&lt;p&gt;指令存储器，使用ROM实现，此前我因为审题不仔细导致这里卡了很久。要注意ROM的地址是以一个字为单位而不是字节，也就是说两个指令在mars中显示的地址是相隔4，用ROM表示其实只相隔1.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;A&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;12&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;D&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;dm&#34;&gt;DM
&lt;/h3&gt;&lt;p&gt;数据存储器，用RAM实现。与指令存储器相比只多了一个写数据的功能。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Clk&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Wr&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;A&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;10&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;DI&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;DO&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;alu&#34;&gt;ALU
&lt;/h3&gt;&lt;p&gt;本文需要的指令只用得到四个运算：加、减、或和判断相等。其中等于可以用减来完成，减可以用补码来简化。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;信号名&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;方向&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;位宽&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;a&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;b&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;op&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;input&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;2&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;c&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;output&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;32&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;组建数据通路&#34;&gt;组建数据通路
&lt;/h2&gt;&lt;h3 id=&#34;取指令&#34;&gt;取指令
&lt;/h3&gt;&lt;p&gt;PC与NPC实际上组成了一个MOORE型状态机，除这两个模块的所有部分都可以看成转移电路。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图是gxp老师课件上的，实际电路NPC应该有几根线&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image.png&#34;
	width=&#34;259&#34;
	height=&#34;205&#34;
	srcset=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image_hu1257119938015792967.png 480w, https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image_hu17176869396698944874.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;126&#34;
		data-flex-basis=&#34;303px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;指令分解&#34;&gt;指令分解
&lt;/h3&gt;&lt;p&gt;纯粹体力劳动，把所有可能出现的指令部分全部分离出来。
&lt;img src=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image-1.png&#34;
	width=&#34;447&#34;
	height=&#34;263&#34;
	srcset=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image-1_hu8684917992346940111.png 480w, https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image-1_hu8989696047024708657.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;169&#34;
		data-flex-basis=&#34;407px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;addu--subu&#34;&gt;ADDU &amp;amp; SUBU
&lt;/h3&gt;&lt;p&gt;最基础的指令，其他指令基本都是通过扩充这一部分的电路。
电路中rs、rt、rd分别给出读写指令，将运算的结果写入rd对应的寄存器中。
&lt;img src=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image-2.png&#34;
	width=&#34;375&#34;
	height=&#34;235&#34;
	srcset=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image-2_hu9688860742562248011.png 480w, https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image-2_hu9898298850582058437.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;382px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;ori&#34;&gt;ORI
&lt;/h3&gt;&lt;p&gt;这一段稍微需要注意一下RTL。
&lt;img src=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/98d4648655182408d1449d73a0d1de9.png&#34;
	width=&#34;859&#34;
	height=&#34;364&#34;
	srcset=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/98d4648655182408d1449d73a0d1de9_hu6089035281481330811.png 480w, https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/98d4648655182408d1449d73a0d1de9_hu15143189203310304875.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;235&#34;
		data-flex-basis=&#34;566px&#34;
	
&gt;
由RTL知，我们要把立即数imm16作零扩展到32位后再参与或运算。同时，注意到这里需要输入GRF和ALU模块的信号与上面不同。rt作为了被写入的寄存器，同时进行运算的一个寄存器被换成了立即数。所以要在A3和B接口前使用MUX进行信号选择。每一次出现这类情况我们都用一个标签作为控制信号，最后使用打表方式一次性生成各指令的控制信号。
&lt;img src=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image-3.png&#34;
	width=&#34;425&#34;
	height=&#34;334&#34;
	srcset=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image-3_hu7305957060314092148.png 480w, https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image-3_hu8727959061812780460.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;127&#34;
		data-flex-basis=&#34;305px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;lw&#34;&gt;LW
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image-4.png&#34;
	width=&#34;1068&#34;
	height=&#34;378&#34;
	srcset=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image-4_hu6443185353931928984.png 480w, https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image-4_hu9297083337520267099.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;282&#34;
		data-flex-basis=&#34;678px&#34;
	
&gt;
首次出现了要对DM进行操作的指令。此时ALU的输出作为读DM的地址，DM的输出被写入对应寄存器中。此外，这里需要对立即数imm16进行的是有符号扩展，所以对EXT也要进行信号选择。
&lt;img src=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image-5.png&#34;
	width=&#34;468&#34;
	height=&#34;328&#34;
	srcset=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image-5_hu8867463498713777001.png 480w, https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image-5_hu7130255315357254439.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;342px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;sw&#34;&gt;SW
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/2e7fa4342d573f3942ad6a7ca10dded.png&#34;
	width=&#34;1102&#34;
	height=&#34;462&#34;
	srcset=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/2e7fa4342d573f3942ad6a7ca10dded_hu14048915399541119807.png 480w, https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/2e7fa4342d573f3942ad6a7ca10dded_hu15226301040041250481.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;238&#34;
		data-flex-basis=&#34;572px&#34;
	
&gt;
写入而非读取，只需要加一个输入的数据信号和读/写控制信号即可。
&lt;img src=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image-6.png&#34;
	width=&#34;495&#34;
	height=&#34;339&#34;
	srcset=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image-6_hu12203084715352990761.png 480w, https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image-6_hu8306275428917290872.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;146&#34;
		data-flex-basis=&#34;350px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;beq&#34;&gt;BEQ
&lt;/h3&gt;&lt;p&gt;这一部分的逻辑主要是在NPC中完成的，此外只需要利用ALU的减法产生一个判断A、B是否相等的信号即可。
&lt;img src=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image-7.png&#34;
	width=&#34;490&#34;
	height=&#34;337&#34;
	srcset=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image-7_hu6149330859689517399.png 480w, https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image-7_hu13825922559627414455.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;145&#34;
		data-flex-basis=&#34;348px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;lui&#34;&gt;LUI
&lt;/h3&gt;&lt;p&gt;唯一老师上课没讲的指令，所以白嫖不了结构图了（悲伤）。
&lt;img src=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/1a301a36ed4a4c9039f80669e96792d.png&#34;
	width=&#34;979&#34;
	height=&#34;382&#34;
	srcset=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/1a301a36ed4a4c9039f80669e96792d_hu1283075729208184123.png 480w, https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/1a301a36ed4a4c9039f80669e96792d_hu549884947335130086.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;256&#34;
		data-flex-basis=&#34;615px&#34;
	
&gt;
但实现非常简单，笔者将imm16拼接了一个16h&#39;0的信号，然后直接连到GRF的WD端，配合MUX和控制信号即可。&lt;/p&gt;
&lt;h2 id=&#34;控制信号&#34;&gt;控制信号
&lt;/h2&gt;&lt;p&gt;为了使控制电路便于阅读和debug，我们使用或逻辑搭建电路，这样使得连线的目的非常明确。生成控制信号也许是最重要的一步，因为这一步很容易粗心。笔者就连错了一条。这里直接把我做的电路放上来。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有人可能会问和逻辑呢？因为我用的是比较器所以省略掉了hhh。
跟上面的信号名不完全一样，仅供参考。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image-8.png&#34;
	width=&#34;1878&#34;
	height=&#34;1171&#34;
	srcset=&#34;https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image-8_hu14412514712159542525.png 480w, https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p3-logisim%E6%90%AD%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9Fcpu/image-8_hu9092032242994337340.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;384px&#34;
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;测试数据&#34;&gt;测试数据
&lt;/h1&gt;&lt;p&gt;以下是我测试用过的数据，其中前一部分是pre给出的样例数据&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;78
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;79
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;80
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;81
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.macro save(%dst)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sw %dst,0($v0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lui $v1,0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $v1,$v1,4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $v0,$v0,$v1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.end_macro
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $a0, $0, 123
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $a1, $a0, 456
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lui $a2, 123            # 符号位为 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lui $a3, 0xffff         # 符号位为 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $a3, $a3, 0xffff    # $a3 = -1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $s0, $a0, $a2      # 正正
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $s1, $a0, $a3      # 正负
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $s2, $a3, $a3      # 负负
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $t0, $0, 0x0000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sw $a0, 0($t0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sw $a1, 4($t0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sw $a2, 8($t0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sw $a3, 12($t0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sw $s0, 16($t0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sw $s1, 20($t0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sw $s2, 24($t0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lw $a0, 0($t0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lw $a1, 12($t0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sw $a0, 28($t0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sw $a1, 32($t0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $a0, $0, 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $a1, $0, 2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $a2, $0, 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;beq $a0, $a1, loop1     # 不相等
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;beq $a0, $a2, loop2     # 相等
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;loop1:sw $a0, 36($t0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;loop2:sw $a1, 40($t0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#以下为新写的
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sub $v0,$v0,$v0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;save($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;save($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;save($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;save($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;save($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;save($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;save($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;save($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;save($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;save($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;save($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;save($0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sub $v0,$v0,$v0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lui $t0,0x7fff
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $t0,$t0,0xffff
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lui $t1,0xffff
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $t1,$t1,0xffff
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lui $t2,0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $t2,$t2,1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lui $t3,0x8000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $t3,$t3,0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $s4,$t0,$t2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;save($s4)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $s4,$t3,$t1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;save($s4)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sub $s4,$t0,$t1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;save($s4)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sub $s4,$t0,$t2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;save($s4)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lui $s0,0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;beq $a1,$a1,equal
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $s0,$s0,0x1111
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;equal:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $s0,$s0,1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;save($s0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lui $s0,0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ori $s0,$s0,1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;equal2:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add $s0,$s0,$s0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;beq $a1,$a1,equal2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;save($s0)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;除此之外，我还使用了大佬分享的评测机进行了测试和对拍。
以下是某一个随机生成的测试文件。
&lt;a class=&#34;link&#34; href=&#34;testcode.txt&#34; &gt;查看文档&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;思考题&#34;&gt;思考题
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;上面我们介绍了通过 FSM 理解单周期 CPU 的基本方法。请大家指出单周期 CPU 所用到的模块中，哪些发挥状态存储功能，哪些发挥状态转移功能。
答：发挥状态存储功能的模块：IFU、DM、GRF。发挥状态转移功能的模块：NPC、ALU、Control。&lt;/li&gt;
&lt;li&gt;现在我们的模块中 IM 使用 ROM， DM 使用 RAM， GRF 使用 Register，这种做法合理吗？ 请给出分析，若有改进意见也请一并给出。
答：合理，因为在本次的单周期CPU设计中，指令是只读的，所以使用只读的ROM进行存储。而DM需要频繁进行读写，所以使用RAM。GRF使用Register是标准设计，因为GRF本身就是寄存器堆，使用一堆寄存器搭建寄存器堆显然合理。此外，寄存器有高读写速度，适用于GRF的工作内容。&lt;/li&gt;
&lt;li&gt;在上述提示的模块之外，你是否在实际实现时设计了其他的模块？如果是的话，请给出介绍和设计的思路。
答：没有。&lt;/li&gt;
&lt;li&gt;事实上，实现 nop 空指令，我们并不需要将它加入控制信号真值表，为什么？
答：不需要。因为nop相当于sll $0,$0,0。即使在设置了sll指令时，因为这条指令并不改变寄存器值，也不会对运行产生影响。更别说我们这次的CPU压根没有实现sll指令。&lt;/li&gt;
&lt;li&gt;阅读 Pre 的 “MIPS 指令集及汇编语言” 一节中给出的测试样例，评价其强度（可从各个指令的覆盖情况，单一指令各种行为的覆盖情况等方面分析），并指出具体的不足之处。
答：总体来看相当弱。没有覆盖sub指令。对add指令测试了正正、正负、负负三种情况，较全面，但是没有针对极端值进行测试（虽然本CPU的add和sub不考虑溢出）。对于beq的测试也过于简单，没有测试offset和寄存器值为负和为0的情况。lw也没有针对$0寄存器作出检验。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>北航CO_P0课上——logisim的基础运用</title>
        <link>https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p0%E8%AF%BE%E4%B8%8Alogisim%E7%9A%84%E5%9F%BA%E7%A1%80%E8%BF%90%E7%94%A8/</link>
        <pubDate>Tue, 01 Oct 2024 00:00:00 +0000</pubDate>
        
        <guid>https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p0%E8%AF%BE%E4%B8%8Alogisim%E7%9A%84%E5%9F%BA%E7%A1%80%E8%BF%90%E7%94%A8/</guid>
        <description>&lt;img src="https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p0%E8%AF%BE%E4%B8%8Alogisim%E7%9A%84%E5%9F%BA%E7%A1%80%E8%BF%90%E7%94%A8/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post 北航CO_P0课上——logisim的基础运用" /&gt;&lt;hr&gt;
&lt;p&gt;昨天晚上进行了&lt;strong&gt;计组P0&lt;/strong&gt;的上机，&lt;strong&gt;他不是普通的上机，是国庆前夜的上机，是计组第一次影响分数的上机，这里除了6系牛马，没人配与他单挑。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在去之前，我是十分焦虑的。这主要是&lt;strong&gt;北航CO&lt;/strong&gt;的低容错所致：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;课程总计&lt;strong&gt;5.5学分&lt;/strong&gt;，分为&lt;strong&gt;理论和实验&lt;/strong&gt;两部分，其中实验部分占比超过&lt;strong&gt;2学分&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;实验部分以课上为主，课上部分采取&lt;strong&gt;闯关制&lt;/strong&gt;，只有通过前面的关卡才能继续挑战后面的关卡。例如你P5挂了，下一次上机别人做P6，你还是做P5，而且你并不是接着上一周的进度做，助教出了&lt;strong&gt;全新的三道题（快说谢谢助教）&lt;/strong&gt;，要是这次还不过，那&lt;strong&gt;下次继续&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;根据往届的说法，前几次上机通过的要求&lt;strong&gt;都是AK&lt;/strong&gt;,必须&lt;strong&gt;三道题全过&lt;/strong&gt;，后面则会变成&lt;strong&gt;过两道即算通过&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;上机难度通常不低，即使是&lt;strong&gt;那些公认的往届大佬都有不少挂过&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不过课程组也知道不能太为难学生，所以还是有一些&lt;strong&gt;保护措施&lt;/strong&gt;，比如前几次上机不做卡关设置，&lt;strong&gt;没过也允许做后面的内容&lt;/strong&gt;（我觉得这可能跟前几次上机不涉及迭代开发有关）。此外，据说再过几周会有一次整体的容错关，大家一起停一周，全过的同学无事可做，剩下的同学可以追一次进度。&lt;strong&gt;相当于提供了挂一次的容错。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是毫无疑问，即便如此上机依然是一个让人无比焦虑的事情，想想看，可能一个思路没转过来，就挂了一次上机，然后直接被大部队甩开，要是在同一关挂两次以上，那简直重开的心都有了。&lt;/p&gt;
&lt;p&gt;幸运的是，这次的P0是一个&lt;strong&gt;纯粹的奖励关&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;情况&#34;&gt;情况
&lt;/h3&gt;&lt;p&gt;我们寝室四个人都在开考后&lt;strong&gt;四十分钟至一个小时&lt;/strong&gt;间AK交卷。同时，我交卷的时候仅我所在机房就有二十几个人排队在我前面等待签退，可见&lt;strong&gt;课程组&lt;/strong&gt;发自内心的想让我们度过一个&lt;strong&gt;快乐的国庆&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;而且我们还发糖吃了，win。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;第一题&#34;&gt;第一题
&lt;/h3&gt;&lt;p&gt;一道非常简单的组合逻辑的题目。要求计算一个四位四进制数的逆序数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在n个数码1，2，…，n的全排列j&lt;sub&gt;1&lt;/sub&gt;j&lt;sub&gt;2&lt;/sub&gt;…j&lt;sub&gt;n&lt;/sub&gt;中，若一个较大的数码排在一个较小的数码的前面，则称它们构成逆序，这个排列的所有逆序的数量，称为这个排列的逆序数，记为τ(j&lt;sub&gt;1&lt;/sub&gt;j&lt;sub&gt;2&lt;/sub&gt;…j&lt;sub&gt;n&lt;/sub&gt;)或π(j&lt;sub&gt;1&lt;/sub&gt;j&lt;sub&gt;2&lt;/sub&gt;…j&lt;sub&gt;n&lt;/sub&gt;)。例如，在四个数码的排列3142中，3与1，3与2以及4与2都构成逆序，因此τ(3142)=3。逆序数为奇数的排列称为奇排列，逆序数为偶数的排列称为偶排列。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这道题的思路连小学生看了上面的定义都知道，只需要从前往后依次比较六次，每次出现前大于后时加一即可。唯一可能需要注意的点就是比较器要设置为unsigned。&lt;/p&gt;
&lt;h3 id=&#34;第二题&#34;&gt;第二题
&lt;/h3&gt;&lt;p&gt;一道非常简单的MOORE状态机的题目，只需要根据指令对两个寄存器进行简单的运算，00不变，01加1，10减1，11置0。有一个输入信号决定操作哪个寄存器。唯一需要注意的是操作一个寄存器时要保证另一个不变，这一点用使能端实现即可。&lt;/p&gt;
&lt;h3 id=&#34;第三题&#34;&gt;第三题
&lt;/h3&gt;&lt;p&gt;一道简单的MOORE状态机的题目，需要输出由“0-9，a-f”构成的最长严格递增后缀子串的长度。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如，串abcdefg的后缀子串包括g,fg,efg,defg,cdefg,bcdefg,abcdefg。若一个后缀子串满足每一个数都比之前的数大，则称其为严格递增后缀子串。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的方法是使用两个寄存器，一个存储上一个数的值，另一个存储最长严格递增后缀子串的长度。状态更新非常简单，略而不表。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>北航CO_P0课下——FSM</title>
        <link>https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p0%E8%AF%BE%E4%B8%8Bfsm/</link>
        <pubDate>Thu, 26 Sep 2024 19:32:28 +0800</pubDate>
        
        <guid>https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p0%E8%AF%BE%E4%B8%8Bfsm/</guid>
        <description>&lt;img src="https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco_p0%E8%AF%BE%E4%B8%8Bfsm/matt-le-SJSpo9hQf7s-unsplash.jpg" alt="Featured image of post 北航CO_P0课下——FSM" /&gt;&lt;hr&gt;
&lt;h1 id=&#34;fsm&#34;&gt;FSM
&lt;/h1&gt;&lt;p&gt;这一题题干是检测是否输入的字符串是否符合给定的格式。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;具体格式是：先输入一到两个b，再输入两个a或c。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;io&#34;&gt;IO
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;In[1:0] I&lt;/li&gt;
&lt;li&gt;CLR I&lt;/li&gt;
&lt;li&gt;Z O&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基本结构&#34;&gt;基本结构
&lt;/h3&gt;&lt;p&gt;Mealy状态机&lt;/p&gt;
&lt;h3 id=&#34;状态变量type&#34;&gt;状态变量type
&lt;/h3&gt;&lt;p&gt;用寄存器表示&lt;/p&gt;
&lt;h5 id=&#34;状态0&#34;&gt;状态0
&lt;/h5&gt;&lt;p&gt;如果输入b则状态为1，否则为0&lt;/p&gt;
&lt;h5 id=&#34;状态1&#34;&gt;状态1
&lt;/h5&gt;&lt;p&gt;经过了&lt;strong&gt;Zebra同学&lt;/strong&gt;的指点，我果断放弃了繁琐至极的原方法。
&lt;del&gt;使用一个通用的计数器，输入b则判断计数器是否大于2，是则状态0且计数器置0，否则计数器增加，否则判断输入是否为a或c，都满足则计数器置1，状态2，否则状态0，同时计数器置0。&lt;/del&gt;
为什么不需要这个呢，因为这道题在连续输入b的时候无论几个都只需要保持状态1。&lt;/p&gt;
&lt;p&gt;如果输入b，保持状态1。
如果输入a或c，进入状态2。
否则变为状态0。&lt;/p&gt;
&lt;h5 id=&#34;状态2&#34;&gt;状态2
&lt;/h5&gt;&lt;p&gt;如果输入b，进入状态1。
如果输入a或c，进入状态3，否则状态0。&lt;/p&gt;
&lt;h5 id=&#34;状态3&#34;&gt;状态3
&lt;/h5&gt;&lt;p&gt;如果输入b，保持状态1。
如果输入a或c，进入状态0。&lt;/p&gt;
&lt;p&gt;PS：状态3其实是多余的，但是两位的寄存器放四个状态比较舒服&lt;/p&gt;
&lt;h3 id=&#34;复位&#34;&gt;复位
&lt;/h3&gt;&lt;p&gt;同步复位，使用MUX。&lt;/p&gt;
&lt;h3 id=&#34;子模块设置&#34;&gt;子模块设置
&lt;/h3&gt;&lt;h5 id=&#34;状态转移模块&#34;&gt;状态转移模块
&lt;/h5&gt;&lt;p&gt;输入：type寄存器的输出和in
输出：type寄存器的输入&lt;/p&gt;
&lt;h5 id=&#34;输出模块&#34;&gt;输出模块
&lt;/h5&gt;&lt;p&gt;与常规Mealy状态机一样，本题是状态为2且输入为a或c即输出1。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>北航CO上机初体验</title>
        <link>https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco%E4%B8%8A%E6%9C%BA%E5%88%9D%E4%BD%93%E9%AA%8C/</link>
        <pubDate>Tue, 24 Sep 2024 12:10:01 +0800</pubDate>
        
        <guid>https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco%E4%B8%8A%E6%9C%BA%E5%88%9D%E4%BD%93%E9%AA%8C/</guid>
        <description>&lt;img src="https://messmerr.github.io/p/%E5%8C%97%E8%88%AAco%E4%B8%8A%E6%9C%BA%E5%88%9D%E4%BD%93%E9%AA%8C/the-creative-exchange-d2zvqp3fpro-unsplash.jpg" alt="Featured image of post 北航CO上机初体验" /&gt;&lt;hr&gt;
&lt;p&gt;花了好几个小时总算把&lt;strong&gt;个人博客&lt;/strong&gt;搭好了。至于为什么要搭这个博客，只能说人终究是从众的生物，当你看到那么多&lt;strong&gt;6系大佬&lt;/strong&gt;都有自己的博客，难免会想着自己搭一个。&lt;/p&gt;
&lt;p&gt;此外，有一说一昨天的&lt;strong&gt;CO上机&lt;/strong&gt;真是一场灾难&lt;/p&gt;
&lt;h3 id=&#34;考试机制&#34;&gt;考试机制
&lt;/h3&gt;&lt;p&gt;每周的考试让人回忆起高中的峥嵘岁月，CO作为北航精品课程，处处都体现出了不同于其他课程的威压：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;在新北地下机房上机，禁止携带电子设备，校园卡验明真身&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;只能使用学校机房电脑&lt;/strong&gt;（这意味着不能使用任何电子资料）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;机房电脑手感极度糟糕&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;电脑自带程序相当有限，我的vscode上配置了基础的C环境，有verilog插件和Markdown插件，然而听有些人说他们的vscode连verilog插件都没有，语法不熟悉就直接寄&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这次的考试机制是总时长&lt;strong&gt;三小时&lt;/strong&gt;，其中前两个小时纯自己做，最后一个小时发出提示文件，还可以向助教提问，&lt;strong&gt;三道题都AC之后&lt;/strong&gt;可以点击交卷，随后助教就会过来提几个问题（&lt;em&gt;然而我因为交卷太晚助教让我直接走&lt;/em&gt;），结束之后就可以离开了。令人惊讶的是这次上机只要在三个小时内AK，&lt;strong&gt;课程平台上就一律算通过&lt;/strong&gt;，于是像我这种三道题全是最后一小时AC的大混子也有个通过标。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://messmerr.github.io/images/blog/image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;第一题&#34;&gt;第一题
&lt;/h3&gt;&lt;p&gt;第一题是一道logisim的&lt;strong&gt;MOORE状态机&lt;/strong&gt;的题目，要求根据输入的不同切换数列的递推方式，这一构造没有什么难度，只要用一个额外的寄存器存储前n项和的值即可。然而这一题最大的难点在于——&lt;strong&gt;同步复位。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;属于是&lt;strong&gt;COpre魅力时刻&lt;/strong&gt;了，因为COpre上根本没有涉及到&lt;strong&gt;同步复位&lt;/strong&gt;的设计方法，我们之前做的题全部都是&lt;strong&gt;异步复位&lt;/strong&gt;。于是我的设计过程是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先使用&lt;strong&gt;异步复位&lt;/strong&gt;，即直接把reset信号练到寄存器的复位端，&lt;strong&gt;四个测试点过两个&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;重新审题，发现需要使用&lt;strong&gt;同步复位&lt;/strong&gt;，经过短暂思考，决定把&lt;strong&gt;clk信号和reset信号&lt;/strong&gt;用&lt;strong&gt;与门&lt;/strong&gt;连接在一起，合成同步的reset信号，然后接到寄存器的复位端。&lt;strong&gt;四个测试点过三个&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;然后我就卡住了（允悲）&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以问题出在哪呢？原来是因为使用与门会导致&lt;strong&gt;毛刺&lt;/strong&gt;的出现，因为延时的问题，导致clk上升沿到达寄存器和clk和reset的与到达寄存器的时间有了&lt;strong&gt;微妙的差异&lt;/strong&gt;，于是就会出现先正常更新一次数据再突然复位的错误现象。&lt;/p&gt;
&lt;p&gt;那么这个问题如何解决呢？答案是&lt;strong&gt;直接放弃寄存器的复位端&lt;/strong&gt;。直接&lt;strong&gt;使用MUX&lt;/strong&gt;，以reset为选择信号，reset为0时正常输入，为1时则输入初始值。这样就保证&lt;strong&gt;复位一定是在clk上升沿进行&lt;/strong&gt;了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;先写到这里，这是第一篇博客，先push一下看看显示正常不。&lt;/em&gt;
OK，没问题，但是我要写&lt;strong&gt;P0课下&lt;/strong&gt;了，暂时先到这里
好的，这一等就是一个星期，现在是&lt;strong&gt;10月1号下午五点&lt;/strong&gt;，我正在高铁上。昨天已经把&lt;strong&gt;P0课上&lt;/strong&gt;考完了。&lt;/p&gt;
&lt;h3 id=&#34;第二题&#34;&gt;第二题
&lt;/h3&gt;&lt;p&gt;第二题是&lt;strong&gt;verilog&lt;/strong&gt;的一道非常基础的题目。几乎只是对基础语法的一个考查。整个算法只涉及一个简单的&lt;strong&gt;循环&lt;/strong&gt;，如果使用vscode插件的话基础语法的正确性也有保障。然而我依然耻辱地在这一题卡了四十分钟，因为我把&lt;strong&gt;阻塞赋值和非阻塞赋值&lt;/strong&gt;搞混了。&lt;/p&gt;
&lt;p&gt;这确实非常不应该，因为阻塞赋值和非阻塞赋值也是COpre重点描述的内容，然而我并没有认真看（允悲）。因此我对这两东西的印象就停留在&lt;code&gt;always&lt;/code&gt;里面用&lt;strong&gt;非阻塞赋值，外面的就用阻塞赋值&lt;/strong&gt;。然而事实并非如此。事实上直到现在我也没完全弄清楚（这周实在是太摆烂了），不过我的印象也升级为了&lt;strong&gt;组合逻辑一定用阻塞赋值（包括&lt;code&gt;always @(*)&lt;/code&gt;内的语句，时序逻辑才用非阻塞赋值）&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;第三题&#34;&gt;第三题
&lt;/h3&gt;&lt;p&gt;第三题与第二题定位类似，是一道极为基础的&lt;strong&gt;MIPS&lt;/strong&gt;题目，代码只涉及简单的&lt;strong&gt;循环，条件判断&lt;/strong&gt;。考虑到mars的help是三款软件中最简单易懂的（写语句的时候直接把意思都标出来，他真的我哭死），只要COpre学会了就不会有问题。&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结
&lt;/h3&gt;&lt;p&gt;总而言之这次CO上机确实是&lt;strong&gt;非常简单&lt;/strong&gt;，然而正是因为它太简单才显得我在考场被卡住的样子更加狼狈。不过事后我发现周围的人情况都跟我类似，大概这是第一次上机的普遍现象吧。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;黏糊糊，且有奇妙拖拽感的鼠标，不知为何看起来很不清晰的显示屏，敲起来完全不跟手的键盘……&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
        
    </channel>
</rss>
