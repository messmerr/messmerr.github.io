<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Messmer&#39;s Personal Blog</title>
    <link>https://messmerr.github.io/post/</link>
    <description>Recent content in Posts on Messmer&#39;s Personal Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 01 Oct 2024 17:14:57 +0800</lastBuildDate>
    <atom:link href="https://messmerr.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>北航CO_P0课上——logisim的基础运用</title>
      <link>https://messmerr.github.io/post/co_p0/</link>
      <pubDate>Tue, 01 Oct 2024 17:14:57 +0800</pubDate>
      <guid>https://messmerr.github.io/post/co_p0/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;昨天晚上进行了&lt;strong&gt;计组P0&lt;/strong&gt;的上机，&lt;strong&gt;他不是普通的上机，是国庆前夜的上机，是计组第一次影响分数的上机，这里除了6系牛马，没人配与他单挑。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;在去之前，我是十分焦虑的。这主要是&lt;strong&gt;北航CO&lt;/strong&gt;的低容错所致：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;课程总计&lt;strong&gt;5.5学分&lt;/strong&gt;，分为&lt;strong&gt;理论和实验&lt;/strong&gt;两部分，其中实验部分占比超过&lt;strong&gt;2学分&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;实验部分以课上为主，课上部分采取&lt;strong&gt;闯关制&lt;/strong&gt;，只有通过前面的关卡才能继续挑战后面的关卡。例如你P5挂了，下一次上机别人做P6，你还是做P5，而且你并不是接着上一周的进度做，助教出了&lt;strong&gt;全新的三道题（快说谢谢助教）&lt;/strong&gt;，要是这次还不过，那&lt;strong&gt;下次继续&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;根据往届的说法，前几次上机通过的要求&lt;strong&gt;都是AK&lt;/strong&gt;,必须&lt;strong&gt;三道题全过&lt;/strong&gt;，后面则会变成&lt;strong&gt;过两道即算通过&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;上机难度通常不低，即使是&lt;strong&gt;那些公认的往届大佬都有不少挂过&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;不过课程组也知道不能太为难学生，所以还是有一些&lt;strong&gt;保护措施&lt;/strong&gt;，比如前几次上机不做卡关设置，&lt;strong&gt;没过也允许做后面的内容&lt;/strong&gt;（我觉得这可能跟前几次上机不涉及迭代开发有关）。此外，据说再过几周会有一次整体的容错关，大家一起停一周，全过的同学无事可做，剩下的同学可以追一次进度。&lt;strong&gt;相当于提供了挂一次的容错。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;但是毫无疑问，即便如此上机依然是一个让人无比焦虑的事情，想想看，可能一个思路没转过来，就挂了一次上机，然后直接被大部队甩开，要是在同一关挂两次以上，那简直重开的心都有了。&lt;/p&gt;&#xA;&lt;p&gt;幸运的是，这次的P0是一个&lt;strong&gt;纯粹的奖励关&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;情况&#34;&gt;情况&lt;/h3&gt;&#xA;&lt;p&gt;我们寝室四个人都在开考后&lt;strong&gt;四十分钟至一个小时&lt;/strong&gt;间AK交卷。同时，我交卷的时候仅我所在机房就有二十几个人排队在我前面等待签退，可见&lt;strong&gt;课程组&lt;/strong&gt;发自内心的想让我们度过一个&lt;strong&gt;快乐的国庆&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;而且我们还发糖吃了，win。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;第一题&#34;&gt;第一题&lt;/h3&gt;&#xA;&lt;p&gt;一道非常简单的组合逻辑的题目。要求计算一个四位四进制数的逆序数。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;在n个数码1，2，…，n的全排列j&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt;j&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;…j&lt;!-- raw HTML omitted --&gt;n&lt;!-- raw HTML omitted --&gt;中，若一个较大的数码排在一个较小的数码的前面，则称它们构成逆序，这个排列的所有逆序的数量，称为这个排列的逆序数，记为τ(j&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt;j&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;…j&lt;!-- raw HTML omitted --&gt;n&lt;!-- raw HTML omitted --&gt;)或π(j&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt;j&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;…j&lt;!-- raw HTML omitted --&gt;n&lt;!-- raw HTML omitted --&gt;)。例如，在四个数码的排列3142中，3与1，3与2以及4与2都构成逆序，因此τ(3142)=3。逆序数为奇数的排列称为奇排列，逆序数为偶数的排列称为偶排列。&lt;/p&gt;</description>
    </item>
    <item>
      <title>北航CO_P0课下——FSM</title>
      <link>https://messmerr.github.io/post/p0_fsm/</link>
      <pubDate>Thu, 26 Sep 2024 19:32:28 +0800</pubDate>
      <guid>https://messmerr.github.io/post/p0_fsm/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;fsm&#34;&gt;FSM&lt;/h1&gt;&#xA;&lt;p&gt;这一题题干是检测是否输入的字符串是否符合给定的格式。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;具体格式是：先输入一到两个b，再输入两个a或c。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;io&#34;&gt;IO&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;In[1:0] I&lt;/li&gt;&#xA;&lt;li&gt;CLR I&lt;/li&gt;&#xA;&lt;li&gt;Z O&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;基本结构&#34;&gt;基本结构&lt;/h3&gt;&#xA;&lt;p&gt;Mealy状态机&lt;/p&gt;&#xA;&lt;h3 id=&#34;状态变量type&#34;&gt;状态变量type&lt;/h3&gt;&#xA;&lt;p&gt;用寄存器表示&lt;/p&gt;&#xA;&lt;h5 id=&#34;状态0&#34;&gt;状态0&lt;/h5&gt;&#xA;&lt;p&gt;如果输入b则状态为1，否则为0&lt;/p&gt;&#xA;&lt;h5 id=&#34;状态1&#34;&gt;状态1&lt;/h5&gt;&#xA;&lt;p&gt;经过了&lt;strong&gt;Zebra同学&lt;/strong&gt;的指点，我果断放弃了繁琐至极的原方法。&#xA;&lt;del&gt;使用一个通用的计数器，输入b则判断计数器是否大于2，是则状态0且计数器置0，否则计数器增加，否则判断输入是否为a或c，都满足则计数器置1，状态2，否则状态0，同时计数器置0。&lt;/del&gt;&#xA;为什么不需要这个呢，因为这道题在连续输入b的时候无论几个都只需要保持状态1。&lt;/p&gt;&#xA;&lt;p&gt;如果输入b，保持状态1。&#xA;如果输入a或c，进入状态2。&#xA;否则变为状态0。&lt;/p&gt;&#xA;&lt;h5 id=&#34;状态2&#34;&gt;状态2&lt;/h5&gt;&#xA;&lt;p&gt;如果输入b，进入状态1。&#xA;如果输入a或c，进入状态3，否则状态0。&lt;/p&gt;&#xA;&lt;h5 id=&#34;状态3&#34;&gt;状态3&lt;/h5&gt;&#xA;&lt;p&gt;如果输入b，保持状态1。&#xA;如果输入a或c，进入状态0。&lt;/p&gt;&#xA;&lt;p&gt;PS：状态3其实是多余的，但是两位的寄存器放四个状态比较舒服&lt;/p&gt;&#xA;&lt;h3 id=&#34;复位&#34;&gt;复位&lt;/h3&gt;&#xA;&lt;p&gt;同步复位，使用MUX。&lt;/p&gt;&#xA;&lt;h3 id=&#34;子模块设置&#34;&gt;子模块设置&lt;/h3&gt;&#xA;&lt;h5 id=&#34;状态转移模块&#34;&gt;状态转移模块&lt;/h5&gt;&#xA;&lt;p&gt;输入：type寄存器的输出和in&#xA;输出：type寄存器的输入&lt;/p&gt;&#xA;&lt;h5 id=&#34;输出模块&#34;&gt;输出模块&lt;/h5&gt;&#xA;&lt;p&gt;与常规Mealy状态机一样，本题是状态为2且输入为a或c即输出1。&lt;/p&gt;</description>
    </item>
    <item>
      <title>北航CO上机初体验</title>
      <link>https://messmerr.github.io/post/blog/</link>
      <pubDate>Tue, 24 Sep 2024 12:10:01 +0800</pubDate>
      <guid>https://messmerr.github.io/post/blog/</guid>
      <description>&lt;hr&gt;&#xA;&lt;p&gt;花了好几个小时总算把&lt;strong&gt;个人博客&lt;/strong&gt;搭好了。至于为什么要搭这个博客，只能说人终究是从众的生物，当你看到那么多&lt;strong&gt;6系大佬&lt;/strong&gt;都有自己的博客，难免会想着自己搭一个。&lt;/p&gt;&#xA;&lt;p&gt;此外，有一说一昨天的&lt;strong&gt;CO上机&lt;/strong&gt;真是一场灾难&lt;/p&gt;&#xA;&lt;h3 id=&#34;考试机制&#34;&gt;考试机制&lt;/h3&gt;&#xA;&lt;p&gt;每周的考试让人回忆起高中的峥嵘岁月，CO作为北航精品课程，处处都体现出了不同于其他课程的威压：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;在新北地下机房上机，禁止携带电子设备，校园卡验明真身&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;只能使用学校机房电脑&lt;/strong&gt;（这意味着不能使用任何电子资料）&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;机房电脑手感极度糟糕&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;电脑自带程序相当有限，我的vscode上配置了基础的C环境，有verilog插件和Markdown插件，然而听有些人说他们的vscode连verilog插件都没有，语法不熟悉就直接寄&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这次的考试机制是总时长&lt;strong&gt;三小时&lt;/strong&gt;，其中前两个小时纯自己做，最后一个小时发出提示文件，还可以向助教提问，&lt;strong&gt;三道题都AC之后&lt;/strong&gt;可以点击交卷，随后助教就会过来提几个问题（&lt;em&gt;然而我因为交卷太晚助教让我直接走&lt;/em&gt;），结束之后就可以离开了。令人惊讶的是这次上机只要在三个小时内AK，&lt;strong&gt;课程平台上就一律算通过&lt;/strong&gt;，于是像我这种三道题全是最后一小时AC的大混子也有个通过标。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../images/blog/image.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;第一题&#34;&gt;第一题&lt;/h3&gt;&#xA;&lt;p&gt;第一题是一道logisim的&lt;strong&gt;MOORE状态机&lt;/strong&gt;的题目，要求根据输入的不同切换数列的递推方式，这一构造没有什么难度，只要用一个额外的寄存器存储前n项和的值即可。然而这一题最大的难点在于——&lt;strong&gt;同步复位。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;属于是&lt;strong&gt;COpre魅力时刻&lt;/strong&gt;了，因为COpre上根本没有涉及到&lt;strong&gt;同步复位&lt;/strong&gt;的设计方法，我们之前做的题全部都是&lt;strong&gt;异步复位&lt;/strong&gt;。于是我的设计过程是这样的：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;首先使用&lt;strong&gt;异步复位&lt;/strong&gt;，即直接把reset信号练到寄存器的复位端，&lt;strong&gt;四个测试点过两个&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;重新审题，发现需要使用&lt;strong&gt;同步复位&lt;/strong&gt;，经过短暂思考，决定把&lt;strong&gt;clk信号和reset信号&lt;/strong&gt;用&lt;strong&gt;与门&lt;/strong&gt;连接在一起，合成同步的reset信号，然后接到寄存器的复位端。&lt;strong&gt;四个测试点过三个&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;然后我就卡住了（允悲）&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;所以问题出在哪呢？原来是因为使用与门会导致&lt;strong&gt;毛刺&lt;/strong&gt;的出现，因为延时的问题，导致clk上升沿到达寄存器和clk和reset的与到达寄存器的时间有了&lt;strong&gt;微妙的差异&lt;/strong&gt;，于是就会出现先正常更新一次数据再突然复位的错误现象。&lt;/p&gt;&#xA;&lt;p&gt;那么这个问题如何解决呢？答案是&lt;strong&gt;直接放弃寄存器的复位端&lt;/strong&gt;。直接&lt;strong&gt;使用MUX&lt;/strong&gt;，以reset为选择信号，reset为0时正常输入，为1时则输入初始值。这样就保证&lt;strong&gt;复位一定是在clk上升沿进行&lt;/strong&gt;了。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;em&gt;先写到这里，这是第一篇博客，先push一下看看显示正常不。&lt;/em&gt;&#xA;OK，没问题，但是我要写&lt;strong&gt;P0课下&lt;/strong&gt;了，暂时先到这里&#xA;好的，这一等就是一个星期，现在是&lt;strong&gt;10月1号下午五点&lt;/strong&gt;，我正在高铁上。昨天已经把&lt;strong&gt;P0课上&lt;/strong&gt;考完了。&lt;/p&gt;&#xA;&lt;h3 id=&#34;第二题&#34;&gt;第二题&lt;/h3&gt;&#xA;&lt;p&gt;第二题是&lt;strong&gt;verilog&lt;/strong&gt;的一道非常基础的题目。几乎只是对基础语法的一个考查。整个算法只涉及一个简单的&lt;strong&gt;循环&lt;/strong&gt;，如果使用vscode插件的话基础语法的正确性也有保障。然而我依然耻辱地在这一题卡了四十分钟，因为我把&lt;strong&gt;阻塞赋值和非阻塞赋值&lt;/strong&gt;搞混了。&lt;/p&gt;&#xA;&lt;p&gt;这确实非常不应该，因为阻塞赋值和非阻塞赋值也是COpre重点描述的内容，然而我并没有认真看（允悲）。因此我对这两东西的印象就停留在&lt;code&gt;always&lt;/code&gt;里面用&lt;strong&gt;非阻塞赋值，外面的就用阻塞赋值&lt;/strong&gt;。然而事实并非如此。事实上直到现在我也没完全弄清楚（这周实在是太摆烂了），不过我的印象也升级为了&lt;strong&gt;组合逻辑一定用阻塞赋值（包括&lt;code&gt;always @(*)&lt;/code&gt;内的语句，时序逻辑才用非阻塞赋值）&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;第三题&#34;&gt;第三题&lt;/h3&gt;&#xA;&lt;p&gt;第三题与第二题定位类似，是一道极为基础的&lt;strong&gt;MIPS&lt;/strong&gt;题目，代码只涉及简单的&lt;strong&gt;循环，条件判断&lt;/strong&gt;。考虑到mars的help是三款软件中最简单易懂的（写语句的时候直接把意思都标出来，他真的我哭死），只要COpre学会了就不会有问题。&lt;/p&gt;&#xA;&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;&#xA;&lt;p&gt;总而言之这次CO上机确实是&lt;strong&gt;非常简单&lt;/strong&gt;，然而正是因为它太简单才显得我在考场被卡住的样子更加狼狈。不过事后我发现周围的人情况都跟我类似，大概这是第一次上机的普遍现象吧。&lt;/p&gt;&#xA;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;&#xA;&lt;hr&gt;&#xA;&lt;ol&gt;&#xA;&lt;li id=&#34;fn:1&#34;&gt;&#xA;&lt;p&gt;黏糊糊，且有奇妙拖拽感的鼠标，不知为何看起来很不清晰的显示屏，敲起来完全不跟手的键盘……&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
